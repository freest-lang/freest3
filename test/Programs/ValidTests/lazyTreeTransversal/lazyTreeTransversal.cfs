data Tree = Leaf | Node Int Tree Tree

-- client

exploreTree :: forall α => Tree -> (rec x. +{LeafC: Skip, NodeC: rec y. &{Value: !Int;y, Left: x;y, Right: x;y, Exit: Skip}});α -> α
exploreTree tree c =
  case tree of
    Leaf ->
      select LeafC c
    Node x l r ->
      let c = select NodeC c in
      exploreNode[α] x l r c

exploreNode :: forall α => Int -> Tree -> Tree -> (rec y. &{Value: !Int;y, Left: +{LeafC: Skip, NodeC: y};y, Right: +{LeafC: Skip, NodeC: y};y, Exit: Skip});α -> α
exploreNode x l r c =
  match c with
    Value c ->
      let c = send x c in
      (exploreNode[α] x l r c)
    Left c ->
      let c = exploreTree[(rec y. &{Value: !Int;y, Left: +{LeafC: Skip, NodeC: y};y, Right: +{LeafC: Skip, NodeC: y};y, Exit: Skip});α] l c in
      (exploreNode[α] x l r c)
    Right c ->
      let c = exploreTree[(rec y. &{Value: !Int;y, Left: +{LeafC: Skip, NodeC: y};y, Right: +{LeafC: Skip, NodeC: y};y, Exit: Skip});α] r c in
      (exploreNode[α] x l r c)
    Exit c1 ->
      c1

-- server: compute the product of the integer values in a tree
-- to be completed

server :: forall α => Int -> (rec x. &{LeafC: Skip, NodeC: rec y. +{Value: ?Int;y, Left: x;y, Right: x;y, Exit: Skip}});α -> (α, Int)
server n c =
  match c with
    LeafC c ->
      (c, n)
    NoceC c ->
      if n == 0
      then let c = select Exit c in
           (c, n)
      else let c = select Value c in
           let c, m = receive c in
           server (n * m) c
  
-- main

start :: Int
start =
  let writer, reader = new (rec x. +{LeafC: Skip, NodeC: rec y. &{Value: !Int;y, Left: x;y, Right: x;y, Exit: Skip}}) in
  let tree = Node 7 (Node 5 Leaf Leaf) (Node 9 (Node 11 Leaf Leaf) (Node 15 Leaf Leaf)) in
  let w = fork (exploreTree[Skip] tree writer) in
  let w, n = server[Skip] 1 reader in
  n


-- let inTree = Node 7 (Node 5 Leaf Leaf) (Node 9 (Node 11 Leaf Leaf) (Node 15 Leaf Leaf)) in
--   let writer,reader = new (rec x . +{LeafC: Skip, NodeC: !Int;x;xn}) in
--   let w = fork (sendTree[Skip] inTree writer) in
--   let outTree, r = receiveTree reader in
--   outTree

