 -- rec xPloreTreeChan . +{Leaf: Skip, Node: xPloreNodeChan}
 -- rec xPloreNodeChan . +{Value: !Int;xPloreNodeChan, Left: xPloreTreeChan;xPloreNodeChan, Right: xPloreTreeChan;xPloreNodeChan, Exit: Skip}

data Tree = Leaf | Node Int Tree Tree

exploreTree :: forall α => Tree -> (rec x. +{LeafC: Skip, NodeC: rec y. &{Value: !Int;y, Left: x;y, Right: x;y, Exit: Skip}});α -> α
exploreTree tree c =
  case tree of
    Leaf ->
      select LeafC c
    Node y l r ->
      let c = select NodeC c in
      exploreNode[α] y l r c

exploreNode :: forall α => Int -> Tree -> Tree -> (rec y. &{Value: !Int;y, Left: +{LeafC: Skip, NodeC: y};y, Right: +{LeafC: Skip, NodeC: y};y, Exit: Skip});α -> α
exploreNode x l r c1 =
  match c1 with
    Value c2 ->
      let c3 = send x c2 in
      (exploreNode[α] x l r c3)
    Left c2 ->
      let c3 = exploreTree[(rec y. &{Value: !Int;y, Left: +{LeafC: Skip, NodeC: y};y, Right: +{LeafC: Skip, NodeC: y};y, Exit: Skip});α] r c2 in
      (exploreNode[α] x l r c3)
    Right c2 ->
      let c3 = exploreTree[(rec y. &{Value: !Int;y, Left: +{LeafC: Skip, NodeC: y};y, Right: +{LeafC: Skip, NodeC: y};y, Exit: Skip});α] r c2 in
      (exploreNode[α] x l r c3)
    Exit c2 ->
      c2

-- (rec y . +{Value: !Int;y, Left: (rec xPloreTreeChan . +{LeafC: Skip, NodeC: y});y, Right: (rec xPloreTreeChan . +{LeafC: Skip, NodeC: y});y, Exit: Skip});x

start :: ()
start =
  let inTree = Node 7 (Node 5 Leaf Leaf) (Node 9 (Node 11 Leaf Leaf) (Node 15 Leaf Leaf)) in
  let writer, reader = new (rec x . +{LeafC: Skip, NodeC: rec y . &{Value: !Int;y, Left: x;y, Right: x;y, Exit: Skip}}) in
  let w = fork(exploreTree[Skip] inTree writer) in
  ()


-- let inTree = Node 7 (Node 5 Leaf Leaf) (Node 9 (Node 11 Leaf Leaf) (Node 15 Leaf Leaf)) in
--   let writer,reader = new (rec x . +{LeafC: Skip, NodeC: !Int;x;xn}) in
--   let w = fork (sendTree[Skip] inTree writer) in
--   let outTree, r = receiveTree reader in
--   outTree

