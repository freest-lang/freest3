-- Recursive tests
forall y : SU => rec x  . x;y

-- Forall tests

forall a : TU => Bool
forall x : TU => !Int
forall x : SU => !Int;x

forall a : TU => a
forall b : TU => b
forall a : TU, b : TU => a
forall x : TU, y : TU => !Int;x;!Bool;y

forall beta : TU => (rec treeChannel  . +{Leaf:Skip,Node:!Int;treeChannel;treeChannel})->((rec treeChannel  . +{Leaf:Skip,Node:!Int;treeChannel;treeChannel});beta)->beta

-- forall beta : TU => (rec treeChannel  . +{Leaf:Skip,Node:!Int;treeChannel;treeChannel}) -> (rec treeChannel  . +{Leaf:Skip,Node:!Int;treeChannel;treeChannel};beta)->beta

-- "Associativity"

forall f : TU => f -o f -> f

forall f : TU => (f -o f) -> f

forall a => Skip;Skip;Skip;a

forall a : TU, b : TU => a -> b


-- treeChannel

forall beta => (rec treeChannel . +{Leaf:Skip,Node:!Int;treeChannel;treeChannel})->(rec treeChannel . +{Leaf:Skip,Node:!Int;treeChannel;treeChannel});beta->beta

-- Transform

forall alpha => (rec treeChannel . +{Leaf:Skip,Node:!Int;treeChannel;treeChannel})->((rec treeChannel . +{Leaf:Skip,Node:!Int;treeChannel;treeChannel});alpha)->((rec treeChannel . +{Leaf:Skip,Node:!Int;treeChannel;treeChannel}),alpha)


-- TreeSum

forall alpha => ((rec xFormChan . &{Leaf:Skip,Node:?Int;xFormChan;xFormChan;!Int});alpha) -o (Int, alpha)

-- ReceiveEval
forall alpha => (rec termChan . &{Const:?Int,Add:termChan;termChan,Mult:termChan;termChan};!Int)->(Int, alpha)
