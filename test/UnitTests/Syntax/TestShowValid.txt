-- Tests for Show
Int
Char
Bool
()
!Int
?Char
Skip

-- Basic Types with parens
(Int)
(Char)
(Bool)
(Skip)

-- In and out with parens
(!Int)
(?Char)

--Simple Pair
(Int,Bool)
(!Char, Bool)

-- Simple semi tests
!Int;?Bool
Skip;!Int
!Int;Skip
(Skip;!Int , Bool)
(Bool , Skip;!Char)
(Int , ?Bool;Skip)
(!Int;Skip , Bool)
(!Int;?Int);?Bool
!Int;(?Int;?Bool)


--Datatypes

[a:Int,b:Bool]
[a:Bool, b:Char]
[a:Bool, b:Skip;!Char]
[b:Skip;!Char,a:Bool]

-- Internal and external choices

&{a:!Int,b:?Bool}
&{a:!Bool;Skip, b:?Char}
&{b:?Char,a:!Bool}
&{a:?Bool, b:Skip;!Char}
&{b:Skip;!Char,a:?Bool}

+{a:!Int,b:!Bool}
+{a:!Bool, b:?Char}
+{b:?Char,a:!Bool}
+{a:?Bool, b:Skip;!Char}
+{b:Skip;!Char,a:?Bool}
+{Leaf:Skip, Node:!Int};Skip
+{Leaf:Skip;Skip, Node:!Int;Skip}

-- Functions

Int -> Bool
!Int -> Bool
!Int -> ?Bool
(Skip;!Int) -> ?Bool
(Skip;!Int) -> Bool
!Int -> ?Char
!Int -> (Skip;?Char)
!Int -> !Bool
!Int -> (!Bool;Skip)
(!Int;Skip) -> Bool
!Int -> ?Char -> Bool
(Int -> Bool) -> Char
(Int -> Bool) -o Char
(Int -o Bool) -> Char
Int -> (Bool -> Char)
Int -> (Bool -o Char)

Int -o Bool
!Char -o Bool
!Int -o Bool
(Skip;!Int) -o Bool
!Bool -o !Char
!Bool -o (Skip;!Char)
!Int -o ?Bool
!Int -o (?Bool;Skip)
(!Int;Skip) -o Bool
(Int -o Bool) -o Char

-- Recursive tests

rec x :: SU . Skip;x
rec x :: SU . x;!Int
rec x :: SU . rec y . x;y
rec x :: SU . !Int; rec y . x ; y
rec x :: SU . !Int;x
rec x :: SU . !Int;!Int;x
rec x :: SU . !Int;Skip
rec x :: SU . Skip;!Int
rec x :: SU . +{l:!Int, m:x}
rec y :: SU . +{l:Skip, m:y};!Int
rec x :: SU . !Int
rec x :: SU . ?Bool
Skip;rec x :: SU . ((!Int);x)
rec x :: SU . x
rec x :: SU . (?Bool -> !Int -> Bool)


-- Complex tests

rec alpha :: SU . (rec TreeChannel :: SU . +{Leaf:Skip,Node:!Int;TreeChannel;TreeChannel});alpha
rec alpha :: SU . !Int;(rec TreeChannel :: SU . +{Leaf:Skip,Node:!Int;TreeChannel;TreeChannel});(rec TreeChannel :: SU . +{Leaf:Skip,Node:!Int;TreeChannel;TreeChannel});alpha
rec alpha :: SU . (!Int;((rec TreeChannel :: SU . +{Leaf:Skip,Node:!Int;TreeChannel;TreeChannel});(rec TreeChannel :: SU . +{Leaf:Skip,Node:!Int;TreeChannel;TreeChannel})));alpha
rec alpha :: SU . !Int;(((rec TreeChannel :: SU . +{Leaf:Skip,Node:!Int;TreeChannel;TreeChannel});(rec TreeChannel :: SU . +{Leaf:Skip,Node:!Int;TreeChannel;TreeChannel}));alpha)
rec alpha :: SU . ((rec TreeChannel :: SU . +{Leaf:Skip,Node:!Int;TreeChannel;TreeChannel});(rec TreeChannel :: SU . +{Leaf:Skip,Node:!Int;TreeChannel;TreeChannel}));alpha
rec alpha :: SU .(rec TreeChannel :: SU . +{Leaf:Skip,Node:!Int;TreeChannel;TreeChannel});((rec TreeChannel :: SU . +{Leaf:Skip,Node:!Int;TreeChannel;TreeChannel});alpha)

(rec XploreNodeChan :: SU . +{Value:!Int;XploreNodeChan, Left:(rec XformChan :: SU . +{Leaf:Skip,Node:!Int;XformChan;XformChan;?Int});XploreNodeChan, Right:(rec XformChan :: SU . +{Leaf:Skip,Node:!Int;XformChan;XformChan;?Int});XploreNodeChan,Exit:Skip})

rec alpha :: SU . Int -> (rec XformChan :: SU . +{Leaf:Skip,Node:!Int;XformChan;XformChan;?Int})->(rec XformChan :: SU . +{Leaf:Skip,Node:!Int;XformChan;XformChan;?Int})->((rec XformChan :: SU . +{Leaf:Skip,Node:!Int;XformChan;XformChan;?Int});alpha)->alpha
