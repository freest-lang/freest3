Int
  Kind {prekind = Functional, multiplicity = Un}
Bool
  Kind {prekind = Functional, multiplicity = Un}
Char
  Kind {prekind = Functional, multiplicity = Un}
()
  Kind {prekind = Functional, multiplicity = Un}
Skip
  Kind {prekind = Session, multiplicity = Un}
!Int
  Kind {prekind = Session, multiplicity = Lin}
!Char
  Kind {prekind = Session, multiplicity = Lin}
?Bool
  Kind {prekind = Session, multiplicity = Lin}
?Char
  Kind {prekind = Session, multiplicity = Lin}
Int -> Bool
  Kind {prekind = Functional, multiplicity = Un}
Int -o Bool
  Kind {prekind = Functional, multiplicity = Lin}
Char -> Skip
  Kind {prekind = Functional, multiplicity = Un}
Char -o Skip
  Kind {prekind = Functional, multiplicity = Lin}
(Int,Bool)
  Kind {prekind = Functional, multiplicity = Lin}
(!Char,())
  Kind {prekind = Functional, multiplicity = Lin}
(!Int, Skip)
  Kind {prekind = Functional, multiplicity = Lin}
[a:Int,b:Bool]
  Kind {prekind = Functional, multiplicity = Un}
!Int;?Bool
  Kind {prekind = Session, multiplicity = Lin}
Skip;Skip
  Kind {prekind = Session, multiplicity = Un}
!Int;Skip
  Kind {prekind = Session, multiplicity = Lin}
Skip;+{s:Skip,i:!Int}
  Kind {prekind = Session, multiplicity = Lin}
rec x . ?Bool
  Kind {prekind = Session, multiplicity = Lin}
rec x . Skip;Skip
  Kind {prekind = Session, multiplicity = Un}
rec x . !Int;Skip;?Int
  Kind {prekind = Session, multiplicity = Lin}
rec x . x
  Kind {prekind = Session, multiplicity = Un}

rec Tree . &{Leaf:Skip, Node:?Int;Tree;Tree}
  Kind {prekind = Session, multiplicity = Lin}

rec TreeChannel . +{Leaf:Skip, Node:!Int;TreeChannel;TreeChannel}
  Kind {prekind = Session, multiplicity = Lin}

rec alpha . !Int;rec TreeChannel . +{Leaf:Skip, Node:!Int;TreeChannel;TreeChannel};rec TreeChannel . +{Leaf:Skip, Node:!Int;TreeChannel;TreeChannel};alpha
  Kind {prekind = Session, multiplicity = Lin}

-- forall x . rec y . rec z . x;y;z
--   Kind {prekind = Session, multiplicity = Un}
--
-- forall alpha . Int -> (!Int;alpha) -> alpha
--   Kind {prekind = Functional, multiplicity = Un}
--
-- forall a . Bool
--   Kind {prekind = Functional, multiplicity = Un}
--
-- forall x . x
--   Kind {prekind = Session, multiplicity = Un}
--
-- forall x . !Int ; x
--   Kind {prekind = Session, multiplicity = Lin}
--
-- forall x . Int -> x
--   Kind {prekind = Functional, multiplicity = Un}
--
-- forall x . Int -o x
--   Kind {prekind = Functional, multiplicity = Lin}
--
-- forall a . (forall b . a)
--   Kind {prekind = Session, multiplicity = Un}
--
-- forall x . !Int;x;forall y . !Bool;y
--   Kind {prekind = Session, multiplicity = Lin}


[AkKLKBCT:(Skip;Skip), GYQehuKQtFTvuoJYDV:(rec lMRIFeRtllKiX . Skip), RzOhNCsmXQBVHTAh:!Bool, WDOuqegDvdBjOFiNRklv:+{BYZaFBLcAMNIkmfD:Skip, DcGN:Skip, HRgBuAGbVDTFA:Skip, ITVqxvLWgyNvVzi:Skip, QeN:Skip, aUs:Skip, iMcWEScmBZA:Skip, nKXJbSr:Skip, nzFjfhEklznanrBzRWU:Skip, wJzcjltne:Skip, zJykoUZtO:Skip}, WkSnuEJqpMeCzcRXFI:&{CGkSnqZZawAc:Skip, HwcNqbwIGzjXtsqmi:Skip, JNZNPsZbuJTQXylhX:Skip, NHUpXnVcDGqfwltixfP:Skip, OQenTqDnrERr:Skip, ObJSbXCEbDfKdv:Skip, SUixpKUClmfnLezituio:Skip,UFDTpWCrOzdDbUNjTsf:Skip, WEvwge:Skip, X:Skip, aDPf:Skip, cHWvBCXOUmq:Skip, iTLuORGYySEJJ:Skip, nCuiDmRlmcPGpT:Skip, phVQWRRHcEpiCeyIfOFK:Skip, rdyjHqIm:Skip, zKMbbwnzqvrfT:Skip}, ZZEbPF:&{CideCVMnnmD:Skip, HieBFAzZVYauWfrF:Skip, WLm:Skip, mPZjrQ:Skip, nQ:Skip, wh:Skip, xLw:Skip}, ccpVoOhjH:?Char, efsMiBfSSiJShvhp:(rec ctLjdKvKCIK . Skip), vTATSQCHdfghziu:!Int, wqVBU:?Bool]
  Kind {prekind = Functional, multiplicity = Lin}
