[]
((rec termChan.&{Add: (termChan;termChan), Const: ?Int, Mult: (termChan;termChan)});(!Int;Skip))
((rec termChan.&{Add: (termChan;termChan), Const: ?Int, Mult: (termChan;termChan)});!Int)

[("x",SL)]
((rec termChan.&{Add: (termChan;termChan), Const: ?Int, Mult: (termChan;termChan)});((rec termChan.&{Add: (termChan;termChan), Const: ?Int, Mult: (termChan;termChan)});x))
(((rec termChan.&{Add: (termChan;termChan), Const: ?Int, Mult: (termChan;termChan)});(rec termChan.&{Add: (termChan;termChan), Const: ?Int, Mult: (termChan;termChan)}));x)

[("x",SL)]
((rec termChan.&{Add: (termChan;termChan), Const: ?Int, Mult: (termChan;termChan)});((rec termChan.&{Add: (termChan;termChan), Const: ?Int, Mult: (termChan;termChan)});x))
(((rec termChan.&{Add: (termChan;termChan), Const: ?Int, Mult: (termChan;termChan)});(rec termChan.&{Add: (termChan;termChan), Const: ?Int, Mult: (termChan;termChan)}));x)

[]
((rec x.+{A: (x;+{B: Skip}), B: Skip});Skip)
(rec x.+{A: (x;+{B: Skip}), B: Skip})

[("α",SL)]
((rec x.+{A: (x;+{B: Skip}), B: Skip});α)
((rec x.+{A: (x;+{B: Skip}), B: Skip});α)

[("α",SL)]
α
(Skip;α)

[("α",SL)]
((rec x.+{A: (x;+{B: Skip}), B: Skip});(+{B: Skip};α))
(((rec x.+{A: (x;+{B: Skip}), B: Skip});+{B: Skip});α)

[]
((rec x.&{A: (x;&{B: Skip}), B: Skip});Skip)
(rec x.&{A: (x;&{B: Skip}), B: Skip})

[("α",SL)]
((rec x.&{A: (x;&{B: Skip}), B: Skip});(&{B: Skip};α))
(((rec x.&{A: (x;&{B: Skip}), B: Skip});&{B: Skip});α)

[("α",SL)]
((rec x.&{A: (x;&{B: Skip}), B: Skip});α)
((rec x.&{A: (x;&{B: Skip}), B: Skip});α)

[("α",SL)]
α
(Skip;α)

[]
&{And: (Skip;(?Bool;(?Bool;(!Bool;Skip)))), Not: (Skip;(?Bool;(!Bool;Skip))), Or: (Skip;(?Bool;(?Bool;(!Bool;Skip))))}
&{And: (?Bool;(?Bool;(!Bool;Skip))), Not: (?Bool;(!Bool;Skip)), Or: (?Bool;(?Bool;(!Bool;Skip)))}

[]
((rec x.&{LeafC: Skip, NodeC: (?Int;(x;(x;!Int)))});Skip)
(rec x.&{LeafC: Skip, NodeC: (?Int;(x;(x;!Int)))})

[]
((rec x.+{LeafC: Skip, NodeC: (!Int;(x;(x;?Int)))});Skip)
(rec x.+{LeafC: Skip, NodeC: (!Int;(x;(x;?Int)))})

[("α",SL)]
((rec x.+{LeafC: Skip, NodeC: (!Int;(x;(x;?Int)))});α)
((rec x.+{LeafC: Skip, NodeC: (!Int;(x;(x;?Int)))});α)

[("α",SL)]
α
(Skip;α)

[("α",SL)]
(Skip;α)
α

[("α",SL)]
((rec x.&{LeafC: Skip, NodeC: (?Int;(x;(x;!Int)))});α)
((rec x.&{LeafC: Skip, NodeC: (?Int;(x;(x;!Int)))});α)

[("α",SL)]
α
(Skip;α)

[("α",SL)]
(Skip;α)
α

[]
(Skip;(Skip;!Int))
!Int

[("α",SL)]
((rec x.+{Leaf: Skip, Node: (rec y.&{Exit: Skip, Left: (x;y), Right: (x;y), Root: (!Int;y)})});((rec y.&{Exit: Skip, Left: (+{Leaf: Skip, Node: y};y), Right: (+{Leaf: Skip, Node: y};y), Root: (!Int;y)});α))
(((rec x.+{Leaf: Skip, Node: (rec y.&{Exit: Skip, Left: (x;y), Right: (x;y), Root: (!Int;y)})});(rec y.&{Exit: Skip, Left: ((rec x.+{Leaf: Skip, Node: (rec y.&{Exit: Skip, Left: (x;y), Right: (x;y), Root: (!Int;y)})});y), Right: ((rec x.+{Leaf: Skip, Node: (rec y.&{Exit: Skip, Left: (x;y), Right: (x;y), Root: (!Int;y)})});y), Root: (!Int;y)}));α)

[("α",SL)]
((rec y.&{Exit: Skip, Left: ((rec x.+{Leaf: Skip, Node: (rec y.&{Exit: Skip, Left: (x;y), Right: (x;y), Root: (!Int;y)})});y), Right: ((rec x.+{Leaf: Skip, Node: (rec y.&{Exit: Skip, Left: (x;y), Right: (x;y), Root: (!Int;y)})});y), Root: (!Int;y)});α)
((rec y.&{Exit: Skip, Left: (+{Leaf: Skip, Node: y};y), Right: (+{Leaf: Skip, Node: y};y), Root: (!Int;y)});α)

[("α",SL)]
((rec x.+{Leaf: Skip, Node: (rec y.&{Exit: Skip, Left: (x;y), Right: (x;y), Root: (!Int;y)})});((rec y.&{Exit: Skip, Left: (+{Leaf: Skip, Node: y};y), Right: (+{Leaf: Skip, Node: y};y), Root: (!Int;y)});α))
(((rec x.+{Leaf: Skip, Node: (rec y.&{Exit: Skip, Left: (x;y), Right: (x;y), Root: (!Int;y)})});(rec y.&{Exit: Skip, Left: ((rec x.+{Leaf: Skip, Node: (rec y.&{Exit: Skip, Left: (x;y), Right: (x;y), Root: (!Int;y)})});y), Right: ((rec x.+{Leaf: Skip, Node: (rec y.&{Exit: Skip, Left: (x;y), Right: (x;y), Root: (!Int;y)})});y), Root: (!Int;y)}));α)

[("α",SL)]
((rec y.&{Exit: Skip, Left: ((rec x.+{Leaf: Skip, Node: (rec y.&{Exit: Skip, Left: (x;y), Right: (x;y), Root: (!Int;y)})});y), Right: ((rec x.+{Leaf: Skip, Node: (rec y.&{Exit: Skip, Left: (x;y), Right: (x;y), Root: (!Int;y)})});y), Root: (!Int;y)});α)
((rec y.&{Exit: Skip, Left: (+{Leaf: Skip, Node: y};y), Right: (+{Leaf: Skip, Node: y};y), Root: (!Int;y)});α)

[("α",SL)]
((rec y.&{Exit: Skip, Left: ((rec x.+{Leaf: Skip, Node: (rec y.&{Exit: Skip, Left: (x;y), Right: (x;y), Root: (!Int;y)})});y), Right: ((rec x.+{Leaf: Skip, Node: (rec y.&{Exit: Skip, Left: (x;y), Right: (x;y), Root: (!Int;y)})});y), Root: (!Int;y)});α)
((rec y.&{Exit: Skip, Left: ((rec x.+{Leaf: Skip, Node: (rec y.&{Exit: Skip, Left: (x;y), Right: (x;y), Root: (!Int;y)})});y), Right: ((rec x.+{Leaf: Skip, Node: (rec y.&{Exit: Skip, Left: (x;y), Right: (x;y), Root: (!Int;y)})});y), Root: (!Int;y)});α)

[("α",SL)]
α
(Skip;α)

[("α",SL)]
(Skip;α)
α

[("α",SL)]
(Skip;α)
α

[("α",SL)]
(Skip;α)
α

[("α",SL)]
((rec x.+{Leaf: Skip, Node: (rec y.&{Exit: Skip, Left: (x;y), Right: (x;y), Root: (!Int;y)})});α)
((rec x.+{Leaf: Skip, Node: (rec y.&{Exit: Skip, Left: (x;y), Right: (x;y), Root: (!Int;y)})});α)

[("α",SL)]
α
(Skip;α)

[("α",SL)]
(Skip;α)
α

[]
((rec x.+{Leaf: Skip, Node: (rec y.&{Exit: Skip, Left: (x;y), Right: (x;y), Root: (!Int;y)})});Skip)
(rec x.+{Leaf: Skip, Node: (rec y.&{Exit: Skip, Left: (x;y), Right: (x;y), Root: (!Int;y)})})

[]
((rec x.&{Leaf: Skip, Node: (rec y.+{Exit: Skip, Left: (x;y), Right: (x;y), Root: (?Int;y)})});Skip)
(rec x.&{Leaf: Skip, Node: (rec y.+{Exit: Skip, Left: (x;y), Right: (x;y), Root: (?Int;y)})})

[("α",SL)]
((rec x.&{Leaf: Skip, Node: (rec y.+{Exit: Skip, Left: (x;y), Right: (x;y), Root: (?Int;y)})});α)
((rec x.&{Leaf: Skip, Node: (rec y.+{Exit: Skip, Left: (x;y), Right: (x;y), Root: (?Int;y)})});α)

[("α",SL)]
α
(Skip;α)

[("α",SL)]
(Skip;α)
α

[("α",SL)]
((rec y.+{Exit: Skip, Left: ((rec x.&{Leaf: Skip, Node: (rec y.+{Exit: Skip, Left: (x;y), Right: (x;y), Root: (?Int;y)})});y), Right: ((rec x.&{Leaf: Skip, Node: (rec y.+{Exit: Skip, Left: (x;y), Right: (x;y), Root: (?Int;y)})});y), Root: (?Int;y)});α)
((rec y.+{Exit: Skip, Left: ((rec x.&{Leaf: Skip, Node: (rec y.+{Exit: Skip, Left: (x;y), Right: (x;y), Root: (?Int;y)})});y), Right: ((rec x.&{Leaf: Skip, Node: (rec y.+{Exit: Skip, Left: (x;y), Right: (x;y), Root: (?Int;y)})});y), Root: (?Int;y)});α)

[("α",SL)]
α
(Skip;α)

[("α",SL)]
((rec x.&{Leaf: Skip, Node: (rec y.+{Exit: Skip, Left: (x;y), Right: (x;y), Root: (?Int;y)})});((rec y.+{Exit: Skip, Left: ((rec x.&{Leaf: Skip, Node: (rec y.+{Exit: Skip, Left: (x;y), Right: (x;y), Root: (?Int;y)})});y), Right: ((rec x.&{Leaf: Skip, Node: (rec y.+{Exit: Skip, Left: (x;y), Right: (x;y), Root: (?Int;y)})});y), Root: (?Int;y)});α))
(((rec x.&{Leaf: Skip, Node: (rec y.+{Exit: Skip, Left: (x;y), Right: (x;y), Root: (?Int;y)})});(rec y.+{Exit: Skip, Left: ((rec x.&{Leaf: Skip, Node: (rec y.+{Exit: Skip, Left: (x;y), Right: (x;y), Root: (?Int;y)})});y), Right: ((rec x.&{Leaf: Skip, Node: (rec y.+{Exit: Skip, Left: (x;y), Right: (x;y), Root: (?Int;y)})});y), Root: (?Int;y)}));α)

[("α",SL)]
((rec x.&{Leaf: Skip, Node: (rec y.+{Exit: Skip, Left: (x;y), Right: (x;y), Root: (?Int;y)})});((rec y.+{Exit: Skip, Left: ((rec x.&{Leaf: Skip, Node: (rec y.+{Exit: Skip, Left: (x;y), Right: (x;y), Root: (?Int;y)})});y), Right: ((rec x.&{Leaf: Skip, Node: (rec y.+{Exit: Skip, Left: (x;y), Right: (x;y), Root: (?Int;y)})});y), Root: (?Int;y)});α))
(((rec x.&{Leaf: Skip, Node: (rec y.+{Exit: Skip, Left: (x;y), Right: (x;y), Root: (?Int;y)})});(rec y.+{Exit: Skip, Left: ((rec x.&{Leaf: Skip, Node: (rec y.+{Exit: Skip, Left: (x;y), Right: (x;y), Root: (?Int;y)})});y), Right: ((rec x.&{Leaf: Skip, Node: (rec y.+{Exit: Skip, Left: (x;y), Right: (x;y), Root: (?Int;y)})});y), Root: (?Int;y)}));α)

[]
&{And: (Skip;(?Bool;(?Bool;(!Bool;Skip)))), Not: (Skip;(?Bool;(!Bool;Skip))), Or: (Skip;(?Bool;(?Bool;(!Bool;Skip))))}
&{And: (?Bool;(?Bool;(!Bool;Skip))), Not: (?Bool;(!Bool;Skip)), Or: (?Bool;(?Bool;(!Bool;Skip)))}

[("α",SL)]
α
(Skip;α)

[]
((rec x.+{Done: Skip, More: (!Char;x)});Skip)
(rec x.+{Done: Skip, More: (!Char;x)})

[]
((rec x.&{Done: Skip, More: (?Char;x)});Skip)
(rec x.&{Done: Skip, More: (?Char;x)})

[("α",SL)]
((rec x.&{Done: Skip, More: (?Char;x)});α)
((rec x.&{Done: Skip, More: (?Char;x)});α)

[("α",SL)]
α
(Skip;α)

[("α",SL)]
(Skip;α)
α

[]
((rec x.+{Leaf: Skip, Node: (!Int;(x;x))});Skip)
(rec x.+{Leaf: Skip, Node: (!Int;(x;x))})

[]
((rec x.&{Leaf: Skip, Node: (?Int;(x;x))});Skip)
(rec x.&{Leaf: Skip, Node: (?Int;(x;x))})

[("a",SL)]
((rec x.&{Leaf: Skip, Node: (?Int;(x;x))});a)
((rec x.&{Leaf: Skip, Node: (?Int;(x;x))});a)

[("a",SL)]
a
(Skip;a)

[("a",SL)]
(Skip;a)
a

[("a",SL)]
((rec x.+{Leaf: Skip, Node: (!Int;(x;x))});a)
((rec x.+{Leaf: Skip, Node: (!Int;(x;x))});a)

[("a",SL)]
a
(Skip;a)

[("a",SL)]
(Skip;a)
a

[]
&{And: (Skip;(?Bool;(?Bool;(!Bool;Skip)))), Not: (Skip;(?Bool;(!Bool;Skip))), Or: (Skip;(?Bool;(?Bool;(!Bool;Skip))))}
&{And: (?Bool;(?Bool;(!Bool;Skip))), Not: (?Bool;(!Bool;Skip)), Or: (?Bool;(?Bool;(!Bool;Skip)))}
