Int
  TU
Bool
  TU
Char
  TU
()
  TU
Skip
  SU
!Int
  SL
!Char
  SL
?Bool
  SL
?Char
  SL
Int -> Bool
  TU
Int -o Bool
  TL
Char -> Skip
  TU
Char -o Skip
  TL
(Int,Bool)
  TL
(!Char,())
  TL
(!Int, Skip)
  TL
[A:Int,B:Bool]
  TU
!Int;?Bool
  SL
Skip;Skip
  SU
!Int;Skip
  SL
Skip;+{S:Skip,I:!Int}
  SL

(Bool -> Bool, !Int)
  TL

-- recursive types

rec x . ?Bool
  SL
  
rec x . Skip
  SU
  
rec x . Skip
  SL
  
rec x . (Skip; Skip)
  SU
  
rec x . (Skip; (Skip; Skip); Skip)
  SU
  
rec x . (Skip; x)
  SU
  
rec x . (Skip; x)
  SL
  
rec x . (Skip; ((Skip; x); Skip); Skip)
  SU
  
rec x . (Skip; ((Skip; x); Skip); Skip)
  SL
  
rec x . (!Int; Skip; ?Int)
  SL
  
rec tree . &{Leaf: Skip, Node: ?Int;tree;tree}
  SL
  
rec treeChannel . +{Leaf: Skip, Node: !Int;treeChannel;treeChannel}
  SL
  
rec alpha . !Int;rec treeChannel . +{Leaf:Skip, Node:!Int;treeChannel;treeChannel};rec treeChannel . +{Leaf:Skip, Node:!Int;treeChannel;treeChannel};x
  SL

-- explicitely typed recursive types

rec x : SL . Skip
  SU

rec x : SU . Skip
  SU

rec x : TL . Skip
  SU

rec x : TU . Skip
  SU

rec x : SL . x -> x
  TU
  
rec x : SU . x -> x
  TU

rec x : TL . x -> x 
  TU

rec x : TU . x -> x 
  TU

rec x : SL . x -o x
  TL
  
rec x : SU . x -o x
  TL

rec x : TL . x -o x 
  TL

rec x : TU . x -o x 
  TL

rec x : SL . rec y : SL . x -> y
  TU 

rec x : SU . rec y : SU . x -> y
  TU 

rec x : TL . rec y : TU . x -> y
  TU 

rec x : TL . rec y : TL . x -> y
  TU 

rec x : SL . rec y : TL . x -> y
  TU 

rec x : SU . rec y : TU . x -> y
  TU 

rec x : TL . rec y : SU . x -> y
  TU 

rec x : SL . rec y : TL . x -> y
  TU 

rec x : SU . rec y : SU. x ; Skip ; Skip; y; Skip
  SU

rec x : SU . rec y : SU. x ; Skip ; Skip; y; Skip
  SL

rec x : SU . rec y : SU. x ; Skip ; Skip; y; Skip
  TU

rec a : TU . (a, !Int)
  TL

rec b : TU . (b, !Int)
  TU

-- dualof

rec x . dualof !Int
  SL

rec x . dualof !Int
  SU

rec x . (dualof Skip) ; x
  SU

rec x . dualof (Skip ; x) 
  SU
