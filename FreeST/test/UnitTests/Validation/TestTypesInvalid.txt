-- Empty choices

&{}
+{}

-- Duplicate labels in records

+{ A: !(), A: !Bool }
+{ A: !(), A: !Bool, B: ?Int }
+{ A: !(), B: ?Int, A: ?Bool }
+{ A: !(), B: ?Int, B: ?Int, A: ?Bool }
&{ A: !(), A: ?Bool }
&{ A: !(), A: ?Bool, B: ?Int }
&{ A: !(), B: ?Int, A: ?Bool }
&{ A: !(), B: ?Int, B: ?Int, A: ?Bool }
+{ A: Unit, A: Bool }
+{ A: Unit, A: Bool, B: Int }
+{ A: Unit, B: Int, A: Bool }
+{ A: Unit, B: Int, B: Int, A: Bool }
&{ A: Unit, A: Bool }
&{ A: Unit, A: Bool, B: Int }
&{ A: Unit, B: Int, A: Bool }
&{ A: Unit, B: Int, B: Int, A: Bool }

-- Non contractive, terminated

rec a:TL. a
rec a:SU. (Skip; a)
rec a:SU. Skip; a; Skip
rec a:SU. Skip; a; a; a; a; a
rec a:SU. (rec a:SU. Skip; a); (rec a:SU. (Skip; a))
Skip; rec a:SU. (Skip; a)
Skip; rec a:SU. ( Skip; a; Skip)
Skip; rec a:SU. ( Skip; a; Skip)
Skip; Skip; Skip; rec a:SU. (Skip; a; a; a; a; a)
Skip; rec a:SU. ((rec a:SU. (Skip; a)); (rec a:SU. (Skip; a))); Skip; Skip
rec a:SU. (((Skip ; a) ; a) ; a)
rec a. a
rec a. a;  a;  a;  a;  a
rec a. rec b. rec c. rec d. a
Int -> rec a. rec b. rec c. rec d. a

-- Non contractive, non terminated

rec b:SL. Skip ; b ; ?Bool
rec z:SU.(+{A: Skip, C: z} ; rec b:SL.((Skip;b);?Bool))
rec z1:SU.(rec z2:SU.(rec a:SL.(+{A: Skip, C: a} ; rec z3:SU.(rec b:SL.(Skip;(z3;?Bool))))))
rec a:SL. (Skip ; a) ; !Bool
rec a. a; !Int
rec a. rec b. rec c. rec d. a; !Bool
rec a. ((a; !Bool); !Int) ; ?Bool
rec z:SL.(rec z:SU.(Skip;(rec a:SU.(rec z:SL.&{B: (rec z:SL.(rec a:SL.(z;(Skip;b))))}))))
rec z:SL.(rec a:SU.&{B: (rec z:SL.((z;Skip);b))})
(rec a:SU.(a;!Bool));!Bool 
rec a:SU.a;!Bool
rec z:SL.(rec a:SU.&{B: (rec z:SL.((z;Skip);b))})
rec z:SL.(rec z:SU.(Skip;(rec a:SU.(rec z:SL.&{B: (rec z:SL.(rec a:SL.(z;(Skip;b))))}))))

-- Non contractive with dualof

rec a. dualof a
rec a. dualof dualof a  
rec a. (dualof dualof a); &{ A: !(), B: ?Int }
rec a. dualof dualof  dualof dualof  dualof dualof  dualof dualof  dualof dualof a 

-- Functional vs Session

!Int ; Int -> Int
!Int ; (Int, Bool)
Int -> Int ; !Int
(Int, Bool) ; !Int
rec a : SL . Int -> Int ; a 
rec a : SU . Int -> Int ; a 
rec a : TU . !Int ; a 
rec a : TL . !Int ; a 
+{ A: () }
+{ A: () -> Bool }

-- Syntatically invalid datatypes, conflicting - removed these because they are not readable types anymore (only available for data declarations)

-- [ A: Char, A: Bool ]
-- [ A: Char, A: Bool, B: Int ]
-- [ A: Char, B: Int, A: Bool ]
-- [ A: Char, B: Int, B: Int, A: Bool ]
-- [ A: Char, A: Bool ]
-- [ A: Char, A: Bool, B: Int ]
-- [ A: Char, B: Int, A: Bool ]
-- [ A: Char, B: Int, B: Int, A: Bool ]
-- []

