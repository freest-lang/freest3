-- Empty choices

&{}
+{}

-- Duplicated labels in records

+{ A: !(), A: !Bool }
+{ A: !(), A: !Bool, B: ?Int }
+{ A: !(), B: ?Int, A: ?Bool }
+{ A: !(), B: ?Int, B: ?Int, A: ?Bool }
&{ A: !(), A: ?Bool }
&{ A: !(), A: ?Bool, B: ?Int }
&{ A: !(), B: ?Int, A: ?Bool }
&{ A: !(), B: ?Int, B: ?Int, A: ?Bool }
+{ A: Unit, A: Bool }
+{ A: Unit, A: Bool, B: Int }
+{ A: Unit, B: Int, A: Bool }
+{ A: Unit, B: Int, B: Int, A: Bool }
&{ A: Unit, A: Bool }
&{ A: Unit, A: Bool, B: Int }
&{ A: Unit, B: Int, A: Bool }
&{ A: Unit, B: Int, B: Int, A: Bool }

-- Non contractive, non terminated

rec b: 1S. Skip ; b ; ?Bool
rec z: *S.(+{A: Skip, C: z} ; rec b: 1S.((Skip;b);?Bool))
rec z1: *S.(rec z2: *S.(rec a: 1S.(+{A: Skip, C: a} ; rec z3: *S.(rec b: 1S.(Skip;(z3;?Bool))))))
rec a: 1S. (Skip ; a) ; !Bool
rec a: 1S. a; !Int
rec a: 1S. rec b: 1S. rec c: 1S. rec d: 1S. a; !Bool
rec a: 1S. ((a; !Bool); !Int) ; ?Bool
rec z: 1S.(rec z: *S.(Skip;(rec a: *S.(rec z: 1S.&{B: (rec z: 1S.(rec a: 1S.(z;(Skip;b))))}))))
rec z: 1S.(rec a: *S.&{B: (rec z: 1S.((z;Skip);b))})
(rec a: *S.(a;!Bool));!Bool 
rec a: *S.a;!Bool
rec z: 1S.(rec a: *S.&{B: (rec z: 1S.((z;Skip);b))})
rec z: 1S.(rec z: *S.(Skip;(rec a: *S.(rec z: 1S.&{B: (rec z: 1S.(rec a: 1S.(z;(Skip;b))))}))))

-- Non contractive but terminated; recursion on non session type variables

rec a :*T. a
rec a: 1T. a
rec a:*T. a;  a;  a;  a;  a
rec a:*T. rec b:*T. rec c:*T. rec d:*T. a
rec a: *S. (rec a: *T. Skip; a); (rec a: *S. (Skip; a))
Skip; rec a: *S. ((rec a: *M. (Skip; a)); (rec a: *S. (Skip; a))); Skip; Skip
Int -> rec a:*T. rec b:*T. rec c:*T. rec d:*T. a
(rec a:*T. rec b:*T. rec c:*T. rec d:*T. a) -> Bool
(rec a:*T. rec b:*T. rec c:*T. rec d:*T. a, Int)

-- Non contractive with dualof

rec a:*T. dualof a
rec a:*T. dualof dualof a  
rec a:*T. (dualof dualof a); &{ A: !(), B: ?Int }
rec a:*T. dualof dualof  dualof dualof  dualof dualof  dualof dualof  dualof dualof a 

-- Functional vs Session

!Int ; Int -> Int
!Int ; (Int, Bool)
Int -> Int ; !Int
(Int, Bool) ; !Int
rec a : 1S . Int -> Int ; a 
rec a : *S . Int -> Int ; a 
rec a : *T . !Int ; a 
rec a : 1T . !Int ; a 
+{ A: () }
+{ A: () -> Bool }

-- Free Variables

a
Skip; a
rec b. !Int; a
Bool 1-> a
(Char, Bool 1-> a)
Int -> ∀ a : 1T . b  
Int -> ∀ a : 1T . (Bool -> b)
(Char, Int -> ∀ a : 1T . (Bool -> b))
forall a: 1S . forall b: 1S . forall z: 1S . ((rec z: 1S. (Skip;&{B: (+{A: (&{B: a, C: Skip};+{A: (?Bool;Skip), B: (z;Skip), C: (((?Int;&{A: ((((?();a);z);+{A: z, C: Skip});!Int), C: !Char});z);Skip)})};(+{A: !Char};(((?Int;&{A: ((((?();a);z);+{A: z, C: Skip});!Int), C: !Char});z);(?Char;((?Int;&{A: ((((?();a);z);+{A: z, C: Skip});!Int), C: !Char});z))))), C: Skip}));((a;&{B: (!Bool;(?();b)), C: (Skip;(?();c))});((?Int;+{B: a, C: ?Int});!Int)))

-- Messages not of kind ML

-- !(Int, Bool)
-- !(!Int; ?Bool)
-- rec a:*T . ?(Int; a)

-- Syntatically invalid datatypes, conflicting - removed these because they are not readable types anymore (only available for data declarations)

-- [ A: Char, A: Bool ]
-- [ A: Char, A: Bool, B: Int ]
-- [ A: Char, B: Int, A: Bool ]
-- [ A: Char, B: Int, B: Int, A: Bool ]
-- [ A: Char, A: Bool ]
-- [ A: Char, A: Bool, B: Int ]
-- [ A: Char, B: Int, A: Bool ]
-- [ A: Char, B: Int, B: Int, A: Bool ]
-- []

-- The kind of the recursion variable is a sub-kind of the one of rec body
-- expecting the other way around.
rec a: *M . !a

forall b: 1S. !Int; rec a: 1S. b; a

forall b:1S . rec a:*T . b

-- Non contractive types

rec a: 1S. a
rec a: *S. a
rec a: *S. (Skip; a)
rec a: *S. Skip; a; Skip
rec a: *S. Skip; a; a; a; a; a
Skip; rec a: *S. (Skip; a)
Skip; rec a: *S. ( Skip; a; Skip)
Skip; rec a: *S. ( Skip; a; Skip)
Skip; Skip; Skip; rec a: *S. (Skip; a; a; a; a; a)
rec a: *S. (((Skip ; a) ; a) ; a)
rec a: *S. (rec a: *S. Skip; a); (rec a: *S. (Skip; a))
Skip; rec a: *S. ((rec a: *S. (Skip; a)); (rec a: *S. (Skip; a))); Skip; Skip

-- Types with a part that is non contractive but terminated

Int -> rec a: 1S. rec b: 1S. rec c: 1S. rec d: 1S. a
(rec a: *T. rec b: *T. rec c: *T. rec d: *T. a) -> Bool
(rec a: *S. rec b: *S. rec c: *S. rec d: *S. a, Int)

-- Higher order

?((Skip ; Skip) ; Int)

-- Unrestricted types

rec a:*S . ?Int; ?Int; a

rec a:*S . +{One: !Int, Two: ?Int, Three: Skip}; a

rec a : *S . ! Int; ?Bool; a

rec a : *S . +{A : !Int; a}

-- Session types of the form `rec a:*T . !Int` that are equivalent to valid types

rec a:*T . !Int
1S

rec a:*T . dualof Int
1S

forall a: 1S . forall b: 1S . forall z: 1S . !Int;(((!Int;Skip);(Skip;+{A: b, B: Skip}));(Skip;(rec b_0: *S. (&{A: ((?Char;(Skip;a));Skip), C: !Int};Skip))))
1T

forall a: 1S . forall b: 1S . forall z: 1S . !Int;((!Int;+{A: b, B: Skip});(rec b_1: *S. &{A: ((?Char;Skip);a), C: !Int}))
1T

(rec b:*T . +{A: (rec b:*T . (rec a : 1S . (+{A: (Skip;(?Int;!())), B: (Skip;?Char)};a)))})
1S

+{A: (rec b:*T. +{A: (((Skip;?Int);!());(rec b:*T . +{A: (rec b : 1S. +{A:(((Skip;?Int);!());b), B: (?Char;b)})})), B: (?Char;(rec b. +{A: (rec b : 1S. +{A: (((Skip;?Int);!());b), B: (?Char;b)})}))})}
1S

forall a: 1S . forall b: 1S . forall z: 1S . ((rec w: 1S. &{B: ((+{A: &{B: a, C: Skip}};(+{A: ?Int, B: w, C: (?Int;(&{A: ((?();(a;w));((Skip;+{A: w, C: Skip});!Int)), C: !Char};w))};Skip));+{A: (!Char;(((?Int;(&{A: ((?();(a;w));((Skip;+{A: w, C: Skip});!Int)), C: !Char};w));?Char);(?Int;(&{A: ((?();(a;w));((Skip;+{A: w, C: Skip});!Int)), C: !Char};w))))}), C: Skip});(a;((&{B: !Int, C: Skip};((rec δ: *S. ?());b));(?Int;(+{B: a, C: ?Int};(!Int;Skip))))))
1T

-- Skip^omega

rec x:*S . Skip; x

rec x:*S . Skip; x; Skip

rec x:*S . Skip ; x ; x ; x


-- Passing types

forall b:1S . a ; forall a:1S . b

forall a:1S . forall a:1T . a ; a

forall a . Skip ; b

rec x . +{Done: forall a . Skip, Send: a;x}

forall a:1T . rec x . rec y . +{Done: End, Send: (forall a:1S . a);a;y} ; x

forall a:1T . rec x . rec y . +{Done: End, Send: a;(forall a:1S . a);y} ; x

forall a:1S . !a ; a ; (a -> a) ; Skip 

a ; forall a:1S . a

(forall a:1S . !Int) ; a

(forall a:1S . !Int) ; rec x . !Int ; ?Int ; a ; x

(forall a:1S . !Int) ; rec x . !Int ; ?Int ; x ; a


