-- Functional

Int -> Bool
Int -> Bool

Int -o Bool
Int -o Bool

Int -> Bool -> Char
Int -> Bool -> Char

!(Int -> rec x. ?Bool;x)
!(Int -> rec y. ?Bool;?Bool;y)

(rec x. ?Bool;x) -> Char
(rec y. ?Bool;?Bool;y) -> Char

!Char -> (rec x. ?Bool;x)
!Char -> (rec y. ?Bool;?Bool;y)

(rec y. !Char;!Char;y) -> (rec x. ?Bool;x)
(rec y. !Char;y) -> (rec y. ?Bool;?Bool;y)

(Char, Bool)
(Char, Bool)

(Char -> !Int, Bool)
(Char -> !Int, Bool)

(rec y. !Char;!Char;y, Bool)
(rec y. !Char;y, Bool)

rec x . [Nil, Cons Int x]
rec y . [Cons Int y, Nil]

-- Higher order

!((rec x.&{Leaf: Skip, Node: (?Int;(x;x))});Skip)
!(rec y.&{Leaf: Skip, Node: (?Int;(y;y))})

!((rec x.&{Leaf: Skip, Node: (?Int;(x;x))});Skip) ; ?((rec x.+{Leaf: Skip, Node: (!Int;(x;x))});a)
!(rec y.&{Leaf: Skip, Node: (?Int;(y;y))})        ; ?((rec y.+{Leaf: Skip, Node: (!Int;(y;y))});a)

rec x. !x
rec y. !y

rec x. !x
rec y. (!y ; Skip)

rec x. !x
(rec y. !y) ; Skip

!(rec x. !x)
!(rec y. !y)

rec x. !x
!(rec x. !x)

rec x. !x
!(!(!(rec y. !y)))

-- First order

((rec termChan.&{Add: (termChan;termChan), Const: ?Int, Mult: (termChan;termChan)});(!Int;Skip))
((rec termChan.&{Add: (termChan;termChan), Const: ?Int, Mult: (termChan;termChan)});!Int)

((rec termChan.&{Add: (termChan;termChan), Const: ?Int, Mult: (termChan;termChan)});((rec termChan.&{Add: (termChan;termChan), Const: ?Int, Mult: (termChan;termChan)});x))
(((rec termChan.&{Add: (termChan;termChan), Const: ?Int, Mult: (termChan;termChan)});(rec termChan.&{Add: (termChan;termChan), Const: ?Int, Mult: (termChan;termChan)}));x)

((rec termChan.&{Add: (termChan;termChan), Const: ?Int, Mult: (termChan;termChan)});((rec termChan.&{Add: (termChan;termChan), Const: ?Int, Mult: (termChan;termChan)});x))
(((rec termChan.&{Add: (termChan;termChan), Const: ?Int, Mult: (termChan;termChan)});(rec termChan.&{Add: (termChan;termChan), Const: ?Int, Mult: (termChan;termChan)}));x)

((rec x.+{A: (x;+{B: Skip}), B: Skip});Skip)
(rec x.+{A: (x;+{B: Skip}), B: Skip})

((rec x.+{A: (x;+{B: Skip}), B: Skip});α)
((rec x.+{A: (x;+{B: Skip}), B: Skip});α)

α
(Skip;α)

((rec x.+{A: (x;+{B: Skip}), B: Skip});(+{B: Skip};α))
(((rec x.+{A: (x;+{B: Skip}), B: Skip});+{B: Skip});α)

((rec x.&{A: (x;&{B: Skip}), B: Skip});Skip)
(rec x.&{A: (x;&{B: Skip}), B: Skip})

((rec x.&{A: (x;&{B: Skip}), B: Skip});(&{B: Skip};α))
(((rec x.&{A: (x;&{B: Skip}), B: Skip});&{B: Skip});α)

((rec x.&{A: (x;&{B: Skip}), B: Skip});α)
((rec x.&{A: (x;&{B: Skip}), B: Skip});α)

α
(Skip;α)

&{And: (Skip;(?Bool;(?Bool;(!Bool;Skip)))), Not: (Skip;(?Bool;(!Bool;Skip))), Or: (Skip;(?Bool;(?Bool;(!Bool;Skip))))}
&{And: (?Bool;(?Bool;(!Bool;Skip))), Not: (?Bool;(!Bool;Skip)), Or: (?Bool;(?Bool;(!Bool;Skip)))}

((rec x.&{LeafC: Skip, NodeC: (?Int;(x;(x;!Int)))});Skip)
(rec x.&{LeafC: Skip, NodeC: (?Int;(x;(x;!Int)))})

((rec x.+{LeafC: Skip, NodeC: (!Int;(x;(x;?Int)))});Skip)
(rec x.+{LeafC: Skip, NodeC: (!Int;(x;(x;?Int)))})

((rec x.+{LeafC: Skip, NodeC: (!Int;(x;(x;?Int)))});α)
((rec x.+{LeafC: Skip, NodeC: (!Int;(x;(x;?Int)))});α)

α
(Skip;α)

(Skip;α)
α

((rec x.&{LeafC: Skip, NodeC: (?Int;(x;(x;!Int)))});α)
((rec x.&{LeafC: Skip, NodeC: (?Int;(x;(x;!Int)))});α)

α
(Skip;α)

(Skip;α)
α

(Skip;(Skip;!Int))
!Int

((rec x.+{Leaf: Skip, Node: (rec y.&{Exit: Skip, Left: (x;y), Right: (x;y), Root: (!Int;y)})});((rec y.&{Exit: Skip, Left: (+{Leaf: Skip, Node: y};y), Right: (+{Leaf: Skip, Node: y};y), Root: (!Int;y)});α))
(((rec x.+{Leaf: Skip, Node: (rec y.&{Exit: Skip, Left: (x;y), Right: (x;y), Root: (!Int;y)})});(rec y.&{Exit: Skip, Left: ((rec x.+{Leaf: Skip, Node: (rec y.&{Exit: Skip, Left: (x;y), Right: (x;y), Root: (!Int;y)})});y), Right: ((rec x.+{Leaf: Skip, Node: (rec y.&{Exit: Skip, Left: (x;y), Right: (x;y), Root: (!Int;y)})});y), Root: (!Int;y)}));α)

((rec y.&{Exit: Skip, Left: ((rec x.+{Leaf: Skip, Node: (rec y.&{Exit: Skip, Left: (x;y), Right: (x;y), Root: (!Int;y)})});y), Right: ((rec x.+{Leaf: Skip, Node: (rec y.&{Exit: Skip, Left: (x;y), Right: (x;y), Root: (!Int;y)})});y), Root: (!Int;y)});α)
((rec y.&{Exit: Skip, Left: (+{Leaf: Skip, Node: y};y), Right: (+{Leaf: Skip, Node: y};y), Root: (!Int;y)});α)

((rec x.+{Leaf: Skip, Node: (rec y.&{Exit: Skip, Left: (x;y), Right: (x;y), Root: (!Int;y)})});((rec y.&{Exit: Skip, Left: (+{Leaf: Skip, Node: y};y), Right: (+{Leaf: Skip, Node: y};y), Root: (!Int;y)});α))
(((rec x.+{Leaf: Skip, Node: (rec y.&{Exit: Skip, Left: (x;y), Right: (x;y), Root: (!Int;y)})});(rec y.&{Exit: Skip, Left: ((rec x.+{Leaf: Skip, Node: (rec y.&{Exit: Skip, Left: (x;y), Right: (x;y), Root: (!Int;y)})});y), Right: ((rec x.+{Leaf: Skip, Node: (rec y.&{Exit: Skip, Left: (x;y), Right: (x;y), Root: (!Int;y)})});y), Root: (!Int;y)}));α)

((rec y.&{Exit: Skip, Left: ((rec x.+{Leaf: Skip, Node: (rec y.&{Exit: Skip, Left: (x;y), Right: (x;y), Root: (!Int;y)})});y), Right: ((rec x.+{Leaf: Skip, Node: (rec y.&{Exit: Skip, Left: (x;y), Right: (x;y), Root: (!Int;y)})});y), Root: (!Int;y)});α)
((rec y.&{Exit: Skip, Left: (+{Leaf: Skip, Node: y};y), Right: (+{Leaf: Skip, Node: y};y), Root: (!Int;y)});α)

((rec y.&{Exit: Skip, Left: ((rec x.+{Leaf: Skip, Node: (rec y.&{Exit: Skip, Left: (x;y), Right: (x;y), Root: (!Int;y)})});y), Right: ((rec x.+{Leaf: Skip, Node: (rec y.&{Exit: Skip, Left: (x;y), Right: (x;y), Root: (!Int;y)})});y), Root: (!Int;y)});α)
((rec y.&{Exit: Skip, Left: ((rec x.+{Leaf: Skip, Node: (rec y.&{Exit: Skip, Left: (x;y), Right: (x;y), Root: (!Int;y)})});y), Right: ((rec x.+{Leaf: Skip, Node: (rec y.&{Exit: Skip, Left: (x;y), Right: (x;y), Root: (!Int;y)})});y), Root: (!Int;y)});α)

α
(Skip;α)

(Skip;α)
α

(Skip;α)
α

(Skip;α)
α

((rec x.+{Leaf: Skip, Node: (rec y.&{Exit: Skip, Left: (x;y), Right: (x;y), Root: (!Int;y)})});α)
((rec x.+{Leaf: Skip, Node: (rec y.&{Exit: Skip, Left: (x;y), Right: (x;y), Root: (!Int;y)})});α)

α
(Skip;α)

(Skip;α)
α

((rec x.+{Leaf: Skip, Node: (rec y.&{Exit: Skip, Left: (x;y), Right: (x;y), Root: (!Int;y)})});Skip)
(rec z.+{Leaf: Skip, Node: (rec x.&{Exit: Skip, Left: (z;x), Right: (z;x), Root: (!Int;x)})})

((rec x.&{Leaf: Skip, Node: (rec y.+{Exit: Skip, Left: (x;y), Right: (x;y), Root: (?Int;y)})});Skip)
(rec x.&{Leaf: Skip, Node: (rec y.+{Exit: Skip, Left: (x;y), Right: (x;y), Root: (?Int;y)})})

((rec x.&{Leaf: Skip, Node: (rec y.+{Exit: Skip, Left: (x;y), Right: (x;y), Root: (?Int;y)})});α)
((rec x.&{Leaf: Skip, Node: (rec y.+{Exit: Skip, Left: (x;y), Right: (x;y), Root: (?Int;y)})});α)

α
(Skip;α)

(Skip;α)
α

((rec y.+{Exit: Skip, Left: ((rec x.&{Leaf: Skip, Node: (rec y.+{Exit: Skip, Left: (x;y), Right: (x;y), Root: (?Int;y)})});y), Right: ((rec x.&{Leaf: Skip, Node: (rec y.+{Exit: Skip, Left: (x;y), Right: (x;y), Root: (?Int;y)})});y), Root: (?Int;y)});α)
((rec y.+{Exit: Skip, Left: ((rec x.&{Leaf: Skip, Node: (rec y.+{Exit: Skip, Left: (x;y), Right: (x;y), Root: (?Int;y)})});y), Right: ((rec x.&{Leaf: Skip, Node: (rec y.+{Exit: Skip, Left: (x;y), Right: (x;y), Root: (?Int;y)})});y), Root: (?Int;y)});α)

α
(Skip;α)

((rec x.&{Leaf: Skip, Node: (rec y.+{Exit: Skip, Left: (x;y), Right: (x;y), Root: (?Int;y)})});((rec y.+{Exit: Skip, Left: ((rec x.&{Leaf: Skip, Node: (rec y.+{Exit: Skip, Left: (x;y), Right: (x;y), Root: (?Int;y)})});y), Right: ((rec x.&{Leaf: Skip, Node: (rec y.+{Exit: Skip, Left: (x;y), Right: (x;y), Root: (?Int;y)})});y), Root: (?Int;y)});α))
(((rec x.&{Leaf: Skip, Node: (rec y.+{Exit: Skip, Left: (x;y), Right: (x;y), Root: (?Int;y)})});(rec y.+{Exit: Skip, Left: ((rec x.&{Leaf: Skip, Node: (rec y.+{Exit: Skip, Left: (x;y), Right: (x;y), Root: (?Int;y)})});y), Right: ((rec x.&{Leaf: Skip, Node: (rec y.+{Exit: Skip, Left: (x;y), Right: (x;y), Root: (?Int;y)})});y), Root: (?Int;y)}));α)

((rec x.&{Leaf: Skip, Node: (rec y.+{Exit: Skip, Left: (x;y), Right: (x;y), Root: (?Int;y)})});((rec y.+{Exit: Skip, Left: ((rec x.&{Leaf: Skip, Node: (rec y.+{Exit: Skip, Left: (x;y), Right: (x;y), Root: (?Int;y)})});y), Right: ((rec x.&{Leaf: Skip, Node: (rec y.+{Exit: Skip, Left: (x;y), Right: (x;y), Root: (?Int;y)})});y), Root: (?Int;y)});α))
(((rec x.&{Leaf: Skip, Node: (rec y.+{Exit: Skip, Left: (x;y), Right: (x;y), Root: (?Int;y)})});(rec y.+{Exit: Skip, Left: ((rec x.&{Leaf: Skip, Node: (rec y.+{Exit: Skip, Left: (x;y), Right: (x;y), Root: (?Int;y)})});y), Right: ((rec x.&{Leaf: Skip, Node: (rec y.+{Exit: Skip, Left: (x;y), Right: (x;y), Root: (?Int;y)})});y), Root: (?Int;y)}));α)

&{And: (Skip;(?Bool;(?Bool;(!Bool;Skip)))), Not: (Skip;(?Bool;(!Bool;Skip))), Or: (Skip;(?Bool;(?Bool;(!Bool;Skip))))}
&{And: (?Bool;(?Bool;(!Bool;Skip))), Not: (?Bool;(!Bool;Skip)), Or: (?Bool;(?Bool;(!Bool;Skip)))}

α
(Skip;α)

((rec x.+{Done: Skip, More: (!Char;x)});Skip)
(rec y.+{Done: Skip, More: (!Char;y)})

((rec x.&{Done: Skip, More: (?Char;x)});Skip)
(rec x.&{Done: Skip, More: (?Char;x)})

((rec x.&{Done: Skip, More: (?Char;x)});α)
((rec x.&{Done: Skip, More: (?Char;x)});α)

α
(Skip;α)

(Skip;α)
α

((rec x.+{Leaf: Skip, Node: (!Int;(x;x))});Skip)
(rec x.+{Leaf: Skip, Node: (!Int;(x;x))})

((rec x.&{Leaf: Skip, Node: (?Int;(x;x))});Skip)
(rec x.&{Leaf: Skip, Node: (?Int;(x;x))})

((rec x.&{Leaf: Skip, Node: (?Int;(x;x))});a)
((rec x.&{Leaf: Skip, Node: (?Int;(x;x))});a)

a
(Skip;a)

(Skip;a)
a

((rec x.+{Leaf: Skip, Node: (!Int;(x;x))});a)
((rec x.+{Leaf: Skip, Node: (!Int;(x;x))});a)

a
(Skip;a)

(Skip;a)
a

&{And: (Skip;(?Bool;(?Bool;(!Bool;Skip)))), Not: (Skip;(?Bool;(!Bool;Skip))), Or: (Skip;(?Bool;(?Bool;(!Bool;Skip))))}
&{And: (?Bool;(?Bool;(!Bool;Skip))), Not: (?Bool;(!Bool;Skip)), Or: (?Bool;(?Bool;(!Bool;Skip)))}
