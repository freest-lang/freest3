-- TODO: We should only test for inequivalence well formed types

-- Functional

Int
Char

Int -> Int
Int 1-> Int

-- Regular Session Types

!Int
?Int

Skip
!Int

Skip
Skip; !Int

?Int
Skip; !Int; Skip

+{A: Skip}
+{B: Skip}

+{A: Skip}
+{A: !Char}

+{A: ?Int, B: Skip; !Char}
+{B: Skip; !Char, A: ?Int, C: !Char}

&{A: ?Int}
&{B: ?Int}

&{A: ?Int}
&{A: Skip}

&{A: ?Int, B: Skip; !Char}
&{B: Skip; !Char, A: ?Int, C:!Char}

!Int
rec a . !Char

rec a . !Int
rec a . !Char

rec a. !Int; a; a
rec a. ?Int; a; a

rec a. rec b. !Int; a; b
rec b. rec a. !Char; a; ?Int; b

rec a . ?Int; a
rec b . !Int; b; b; !Char; b; ?Int; b; b; ?Int; b; b

rec a . +{A: !Int;a}
rec b . +{A: b}; !Int

rec a . +{A: !Int, B: a}
rec b . +{A: b, B: Skip}; !Int

rec a . +{A: !Int, B: a}
rec b . +{A: Skip, B: b}; !Int

rec a. &{Leaf: ?Int; a, Node: ?Int;a;a}
rec a. &{Leaf: ?Int, Node: ?Int;a;a}

(rec a . &{LeafC: Skip, NodeC: (?Int;(a;a))}  ); a
 rec a . &{LeafC: Skip, NodeC: (?Int;(a;a))};a

(rec a . &{N: a;!Int, L: Skip});?Int
rec a . &{N: a;!Int;?Int, L:?Int}

rec a. +{A: a; !Int, B: !Int}
rec a. +{A: a; !Int, B: !Int}; +{B: Skip}; +{B: Skip}; !Int

rec a  . &{N:a;a;!Int, L:!Int}
(rec a  . &{N:a;a;!Int, L:Skip});!Int

rec a  . &{N:a;a;!Int, L:!Int}
rec a  . &{N:a;a;!Int, L:Skip};!Int

rec a  . &{N:a;a;!Int, L:!Int}
rec a  . (&{N:a;a;!Int, L:Skip};!Int)

(rec a. +{A: a; ?Char, B: ?Char}); ?Char
(rec a. +{A: a; +{B: Skip}; +{B: Skip}; ?Char, B: +{B: Skip}; +{B: Skip}; ?Char}); +{B: Skip}; +{B: Skip}; ?Char

(rec b. +{A: (rec b. (rec a. (+{A: (Skip;(?Int;!())), B: (Skip;?Char)};a)))})
+{A: (rec b. +{A: (((Skip;?Int);!());(rec b. +{A: (rec b. +{A: (((Skip;?Int);!());b), B: (?Char;b)})})), B: (?Char;(rec b. +{A: (rec b. +{A: (((Skip;?Int);!());b), B: (?Char;b)})}))})}

-- End 

!Int;End;!Char
!Char;End;!Int

End
Skip

!(End)
!(Skip)

!(!Int;End)
!(?Int;End)

-- Session types

-- Higher Order

!((rec y. +{a:!Char;!Char;y, b: Skip}) -> (rec x. ?Int;x)) ; ?Int
!((rec y. +{a:!Char;y, b: Skip}) -> (rec y. ?Int;?Int;y)) ; ?Int

(rec y. +{a:!Char;!Char;y, b: Skip}) -> Int
(rec y. +{a:!Char;y, b: Skip}) -> Int

-- First Order

((rec x.+{LeafC: Skip, NodeC: (!Int;(x;(x;?Int)))});((rec x.+{LeafC: Skip, NodeC: (!Int;(x;(x;?Int)))});?Int))
((rec x.+{LeafC: Skip, NodeC: (!Int;(x;(x;?Int)))});((rec x.+{LeafC: Skip, NodeC: (!Int;(x;(x;?Int)))});(?Int;((rec x.+{LeafC: Skip, NodeC: (!Int;(x;(x;?Int)))});?Int))))

(Skip;((rec x.+{LeafC: Skip, NodeC: (!Int;(x;(x;?Int)))});?Int))
Skip

((rec x.+{LeafC: Skip, NodeC: (!Int;(x;(x;?Int)))});((rec x.+{LeafC: Skip, NodeC: (!Int;(x;(x;?Int)))});?Int))
((rec x.+{LeafC: Skip, NodeC: (!Int;(x;(x;?Int)))});((rec x.+{LeafC: Skip, NodeC: (!Int;(x;(x;?Int)))});(?Int;?Int)))

(rec x.+{LeafC: Skip, NodeC: (!Int;(x;(x;?Int)))})
(Skip;?Int)

(rec x.+{EOS: Skip, Node: x, Root: (!Int;x)})
Skip

Skip
(rec x.+{EOS: Skip, Node: x, Root: (!Int;x)})

((rec x.+{LeafC: Skip, NodeC: (!Int;(x;(x;?Int)))});((rec x.+{LeafC: Skip, NodeC: (!Int;(x;(x;?Int)))});?Int))
((rec x.+{LeafC: Skip, NodeC: (!Int;(x;(x;?Int)))});((rec x.+{LeafC: Skip, NodeC: (!Int;(x;(x;?Int)))});(?Int;((rec x.+{LeafC: Skip, NodeC: (!Int;(x;(x;?Int)))});?Int))))

(Skip;((rec x.+{LeafC: Skip, NodeC: (!Int;(x;(x;?Int)))});?Int))
Skip

((rec x.+{LeafC: Skip, NodeC: (!Int;(x;(x;?Int)))});((rec x.+{LeafC: Skip, NodeC: (!Int;(x;(x;?Int)))});?Int))
((rec x.+{LeafC: Skip, NodeC: (!Int;(x;(x;?Int)))});((rec x.+{LeafC: Skip, NodeC: (!Int;(x;(x;?Int)))});(?Int;?Int)))

(rec x.+{LeafC: Skip, NodeC: (!Int;(x;(x;?Int)))})
(Skip;?Int)

(Skip;?Int)
Skip

!Int
!Char

!Char
!Int

a
Skip

((rec x.+{Leaf: Skip, Node: (!Int;(x;x))});((rec x.+{Leaf: Skip, Node: (!Int;(x;x))});(a;!Int)))
((rec x.+{Leaf: Skip, Node: (!Int;(x;x))});((rec x.+{Leaf: Skip, Node: (!Int;(x;x))});a))

((rec x.+{Leaf: Skip, Node: (!Int;(x;x))});(a;!Char))
((rec x.+{Leaf: Skip, Node: (!Int;(x;x))});(a;!Int))

(Skip;a)
(a;!Char)

((rec x.+{Leaf: Skip, Node: (!Int;(x;x))});Skip)
(rec x.+{Leaf: Skip, Node: (!Int;(x;(x;(Skip;?Char))))})

((rec x.&{Leaf: Skip, Node: (?Int;(x;x))});Skip)
(rec x.&{Leaf: Skip, Node: (?Int;(x;(x;(Skip;!Char))))})

((rec x.&{Leaf: Skip, Node: (?Int;(x;x))});(rec x.&{Leaf: Skip, Node: (?Int;(x;x))}))
((rec x.&{Leaf: Skip, Node: (?Int;(x;x))});((rec x.&{Leaf: Skip, Node: (?Int;(x;x))});a))

((rec x.&{Leaf: Skip, Node: (?Int;(x;x))});a)
(rec x.&{Leaf: Skip, Node: (?Int;(x;x))})

((rec x.+{Leaf: Skip, Node: (!Int;(x;x))});?Int)
(rec x.+{Leaf: Skip, Node: (!Int;(x;x))})

((rec x.+{Leaf: Skip, Node: (!Int;(x;x))});?Int)
(rec x.+{Leaf: Skip, Node: (!Int;(x;(x;(Skip;?Char))))})

