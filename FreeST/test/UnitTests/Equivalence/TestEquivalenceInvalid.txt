-- Functional

[]
Int
Char

[]
Int -> Int
Int 1-> Int

-- Regular Session Types

[]
!Int
?Int

[]
Skip
!Int

[]
Skip
Skip; !Int

[]
?Int
Skip; !Int; Skip

[]
+{A: Skip}
+{B: Skip}

[]
+{A: Skip}
+{A: !Char}

[]
+{A: ?Int, B: Skip; !Char}
+{B: Skip; !Char, A: ?Int, C: !Char}

[]
&{A: ?Int}
&{B: ?Int}

[]
&{A: ?Int}
&{A: Skip}

[]
&{A: ?Int, B: Skip; !Char}
&{B: Skip; !Char, A: ?Int, C:!Char}

[]
!Int
rec a . !Char

[]
rec a . !Int
rec a . !Char

[]
rec a:1S. !Int; a; a
rec a:1S. ?Int; a; a

[]
rec a:1S. rec b:1S. !Int; a; b
rec b:1S. rec a:1S. !Char; a; ?Int; b

[]
rec a:1S . ?Int; a
rec b:1S . !Int; b; b; !Char; b; ?Int; b; b; ?Int; b; b

[]
rec a:1S . +{A: !Int;a}
rec b:1S . +{A: b}; !Int

[]
rec a:1S . +{A: !Int, B: a}
rec b:1S . +{A: b, B: Skip}; !Int

[]
rec a:1S . +{A: !Int, B: a}
rec b:1S . +{A: Skip, B: b}; !Int

[]
rec a:1S. &{Leaf: ?Int; a, Node: ?Int;a;a}
rec a:1S. &{Leaf: ?Int, Node: ?Int;a;a}

[("a", "1S")]
(rec a:1S . &{LeafC: Skip, NodeC: (?Int;(a;a))}  ); a
rec a:1S . &{LeafC: Skip, NodeC: (?Int;(a;a))};a

[]
(rec a:1S . &{N: a;!Int, L: Skip});?Int
rec a:1S . &{N: a;!Int;?Int, L:?Int}

[]
rec a:1S. +{A: a; !Int, B: !Int}
rec a:1S. +{A: a; !Int, B: !Int}; +{B: Skip}; +{B: Skip}; !Int

[]
rec a:1S  . &{N:a;a;!Int, L:!Int}
(rec a:1S  . &{N:a;a;!Int, L:Skip});!Int

[]
rec a:1S  . &{N:a;a;!Int, L:!Int}
rec a:1S  . &{N:a;a;!Int, L:Skip};!Int

[]
rec a:1S  . &{N:a;a;!Int, L:!Int}
rec a:1S  . (&{N:a;a;!Int, L:Skip};!Int)

[]
(rec a:1S. +{A: a; ?Char, B: ?Char}); ?Char
(rec a:1S. +{A: a; +{B: Skip}; +{B: Skip}; ?Char, B: +{B: Skip}; +{B: Skip}; ?Char}); +{B: Skip}; +{B: Skip}; ?Char

[]
(rec b:1S. +{A: (rec b:1S. (rec a:1S. (+{A: (Skip;(?Int;!())), B: (Skip;?Char)};a)))})
+{A: (rec b:1S. +{A: (((Skip;?Int);!());(rec b:1S. +{A: (rec b:1S. +{A: (((Skip;?Int);!());b), B: (?Char;b)})})), B: (?Char;(rec b:1S. +{A: (rec b:1S. +{A: (((Skip;?Int);!());b), B: (?Char;b)})}))})}

-- End 

[]
!Int;Close;!Char
!Char;Close;!Int

[]
Close
Skip

[]
!(Close)
!(Skip)

[]
!(!Int;Close)
!(?Int;Close)

-- Session types

-- Higher Order

[]
!((rec y:1S. +{A:!Char;!Char;y, B: Skip}) -> (rec x:1S. ?Int;x)) ; ?Int
!((rec y:1S. +{A:!Char;y, B: Skip}) -> (rec y:1S. ?Int;?Int;y)) ; ?Int

[]
(rec y:1S. +{a:!Char;!Char;y, b: Skip}) -> Int
(rec y:1S. +{a:!Char;y, b: Skip}) -> Int

-- First Order

[]
((rec x:1S.+{LeafC: Skip, NodeC: (!Int;(x;(x;?Int)))});((rec x:1S.+{LeafC: Skip, NodeC: (!Int;(x;(x;?Int)))});?Int))
((rec x:1S.+{LeafC: Skip, NodeC: (!Int;(x;(x;?Int)))});((rec x:1S.+{LeafC: Skip, NodeC: (!Int;(x;(x;?Int)))});(?Int;((rec x:1S.+{LeafC: Skip, NodeC: (!Int;(x;(x;?Int)))});?Int))))

[]
(Skip;((rec x:1S.+{LeafC: Skip, NodeC: (!Int;(x;(x;?Int)))});?Int))
Skip

[]
((rec x:1S.+{LeafC: Skip, NodeC: (!Int;(x;(x;?Int)))});((rec x:1S.+{LeafC: Skip, NodeC: (!Int;(x;(x;?Int)))});?Int))
((rec x:1S.+{LeafC: Skip, NodeC: (!Int;(x;(x;?Int)))});((rec x:1S.+{LeafC: Skip, NodeC: (!Int;(x;(x;?Int)))});(?Int;?Int)))

[]
(rec x:1S.+{LeafC: Skip, NodeC: (!Int;(x;(x;?Int)))})
(Skip;?Int)

[]
(rec x:1S.+{EOS: Skip, Node: x, Root: (!Int;x)})
Skip

[]
Skip
(rec x:1S.+{EOS: Skip, Node: x, Root: (!Int;x)})

[]
((rec x:1S.+{LeafC: Skip, NodeC: (!Int;(x;(x;?Int)))});((rec x:1S.+{LeafC: Skip, NodeC: (!Int;(x;(x;?Int)))});?Int))
((rec x:1S.+{LeafC: Skip, NodeC: (!Int;(x;(x;?Int)))});((rec x:1S.+{LeafC: Skip, NodeC: (!Int;(x;(x;?Int)))});(?Int;((rec x:1S.+{LeafC: Skip, NodeC: (!Int;(x;(x;?Int)))});?Int))))

[]
(Skip;((rec x:1S.+{LeafC: Skip, NodeC: (!Int;(x;(x;?Int)))});?Int))
Skip

[]
((rec x:1S.+{LeafC: Skip, NodeC: (!Int;(x;(x;?Int)))});((rec x:1S.+{LeafC: Skip, NodeC: (!Int;(x;(x;?Int)))});?Int))
((rec x:1S.+{LeafC: Skip, NodeC: (!Int;(x;(x;?Int)))});((rec x:1S.+{LeafC: Skip, NodeC: (!Int;(x;(x;?Int)))});(?Int;?Int)))

[]
(rec x:1S.+{LeafC: Skip, NodeC: (!Int;(x;(x;?Int)))})
(Skip;?Int)

[]
(Skip;?Int)
Skip

[]
!Int
!Char

[]
!Char
!Int

[("a", "1S")]
a
Skip

[("a", "1S")]
((rec x:1S.+{Leaf: Skip, Node: (!Int;(x;x))});((rec x:1S.+{Leaf: Skip, Node: (!Int;(x;x))});(a;!Int)))
((rec x:1S.+{Leaf: Skip, Node: (!Int;(x;x))});((rec x:1S.+{Leaf: Skip, Node: (!Int;(x;x))});a))

[("a", "1S")]
((rec x:1S.+{Leaf: Skip, Node: (!Int;(x;x))});(a;!Char))
((rec x:1S.+{Leaf: Skip, Node: (!Int;(x;x))});(a;!Int))

[("a", "1S")]
(Skip;a)
(a;!Char)

[]
((rec x:1S.+{Leaf: Skip, Node: (!Int;(x;x))});Skip)
(rec x:1S.+{Leaf: Skip, Node: (!Int;(x;(x;(Skip;?Char))))})

[]
((rec x:1S.&{Leaf: Skip, Node: (?Int;(x;x))});Skip)
(rec x:1S.&{Leaf: Skip, Node: (?Int;(x;(x;(Skip;!Char))))})

[("a", "1S")]
((rec x:1S.&{Leaf: Skip, Node: (?Int;(x;x))});(rec x:1S.&{Leaf: Skip, Node: (?Int;(x;x))}))
((rec x:1S.&{Leaf: Skip, Node: (?Int;(x;x))});((rec x:1S.&{Leaf: Skip, Node: (?Int;(x;x))});a))

[("a", "1S")]
((rec x:1S.&{Leaf: Skip, Node: (?Int;(x;x))});a)
(rec x:1S.&{Leaf: Skip, Node: (?Int;(x;x))})

[]
((rec x:1S.+{Leaf: Skip, Node: (!Int;(x;x))});?Int)
(rec x:1S.+{Leaf: Skip, Node: (!Int;(x;x))})

[]
((rec x:1S.+{Leaf: Skip, Node: (!Int;(x;x))});?Int)
(rec x:1S.+{Leaf: Skip, Node: (!Int;(x;(x;(Skip;?Char))))})
[]
(rec a:1S . +{A: !Char, B: a ; a}) ; ?Int ; Close
(rec a:1S . +{A: !Char, B: a ; a}) ; ?Int ; Wait

[]
(rec a:1S . +{A: !Char, B: a ; a}) ; ?Int ; Close
(rec a:1S . +{A: !Char, B: a ; a}) ; ?Int ; Wait
