-- Simple types

[]
Int
Int

[]
Char
Char

[]
Float
Float

[]
Int
Int

[]
()
()

-- Session types

[]
!Int
!Int

[]
?Char
?Char

[]
!Int
!Int

[]
?()
?()

[]
Skip
Skip

[]
!Int
Skip;!Int

[]
!Int
!Int;Skip

[]
!Int
Skip;!Int;Skip

[]
!Int
Skip;Skip;Skip;Skip;!Int;Skip;Skip;Skip

[]
!Int;Skip;?Int
!Int;?Int

[]
Skip;!Int
!Int;Skip

[]
!Int;Skip
Skip;!Int

[]
Skip
Skip;Skip

[("α", "1S"), ("β","1S")]
Skip
Skip

-- Close 

[]
Close
Close

[]
Close
Close;!Int

[]
Close;!Int
Close;?Int

[]
Close;!Int
Close;?Int

[]
!Char;Close;!Int
!Char;Close;?Int

[]
(!Int;Close;!Int);?Int
!Int;Close;!Int

[]
(rec a:1S . +{A: !Int;a, B: Skip;Close;Skip});!Int
rec a:1S . +{A: !Int;a, B: Close;a}

[]
rec a:1S . rec b:1S . +{A: !Int;b, B:Close;a}
rec a:1S . rec b:1S . +{A: !Int;b, B:Close;b}

[]
rec a:1S  . &{N:!Int;!Int;a, L:Close};?Int
rec a:1S  . &{N:!Int;!Int;a, L:Skip};Close

[]
rec a:1S . !((rec a:1S . +{A: !Int;a, B: Skip;Close;Skip});!Int);?(a;!(Close);Close;?Int)
rec b:1S . !(rec a:1S . +{A: !Int;a, B: Close;a});Skip;?(b;Skip;!(Close);Close;b;!b)

[]
!(!Int;Close)
!(!Int;Skip;Close;?Int)

[]
∀ α: 1S . Close;α;!Int
∀ β: 1S . (Close;β);Skip

[]
∀ α: 1S . rec a:1S . !((rec a:1S . +{A: !α;a, B: α;Close;α});!Int);?(a;!(Close);Close)
∀ β: 1S . rec b:1S . !(rec a:1S . +{A: !β;a, B: β;Close;!a});Skip;?(b;Skip;!(Close);Close;β;!β)


-- Wait 

[]
Wait
Wait

[]
Wait
Wait;!Int

[]
Wait;!Int
Wait;?Int

[]
Wait;!Int
Wait;?Int

[]
!Char;Wait;!Int
!Char;Wait;?Int

[]
(!Int;Wait;!Int);?Int
!Int;Wait;!Int

[]
(rec a:1S . +{A: !Int;a, B: Skip;Wait;Skip});!Int
rec a:1S . +{A: !Int;a, B: Wait;a}

[]
rec a:1S . rec b:1S . +{A: !Int;b, B:Wait;a}
rec a:1S . rec b:1S . +{A: !Int;b, B:Wait;b}

[]
rec a:1S  . &{N:!Int;!Int;a, L:Wait};?Int
rec a:1S  . &{N:!Int;!Int;a, L:Skip};Wait

[]
rec a:1S . !((rec a:1S . +{A: !Int;a, B: Skip;Wait;Skip});!Int);?(a;!(Wait);Wait;?Int)
rec b:1S . !(rec a:1S . +{A: !Int;a, B: Wait;a});Skip;?(b;Skip;!(Wait);Wait;b;!b)

[]
!(!Int;Wait)
!(!Int;Skip;Wait;?Int)

[]
∀ α: 1S . Wait;α;!Int
∀ β: 1S . (Wait;β);Skip

[]
∀ α: 1S . rec a:1S . !((rec a:1S . +{A: !α;a, B: α;Wait;α});!Int);?(a;!(Wait);Wait)
∀ β: 1S . rec b:1S . !(rec a:1S . +{A: !β;a, B: β;Wait;!a});Skip;?(b;Skip;!(Wait);Wait;β;!β)

-- Functional and session, mixed

[]
!Int -> Int
!Int -> Int

[]
Int 1-> Int
Int 1-> Int

[]
Int -> Int -> Char
Int -> Int -> Char

[]
!Int -> ?Int
Skip;!Int -> ?Int

[]
!Int -> Int
Skip;!Int -> Int

[]
!Int -> Int
!Int;Skip -> Int

[]
!Int -> ?Char
!Int -> Skip;?Char

[]
!Int -> !Int
!Int -> Skip;!Int

[]
!Int -> Int
!Int;Skip -> Int

[]
!Int -> Int
!Int;Skip -> Int

[]
!Int -> ?Char -> Int
!Int -> ?Char -> Int

[]
!Char 1-> Int
!Char 1-> Int

[]
!Int 1-> Int
(Skip;!Int) 1-> Int

[]
!Int 1-> Int
(Skip;!Int) 1-> Int

[]
!Int 1-> !Char
!Int 1-> !Char;Skip

[]
!Int 1-> ?Int
!Int 1-> ?Int;Skip

[]
!Int 1-> Int
!Int;Skip 1-> Int

[]
!Int 1-> Int
!Int;Skip 1-> Int

[]
(!Char, Int)
(!Char, Int)

[]
(!Int , Int)
(Skip;!Int , Int)

[]
(Int, !Char)
(Int, Skip;!Char)

[]
(Int, ?Int)
(Int, ?Int;Skip)

[]
(!Int , Int)
(!Int;Skip , Int)

[]
(rec x:1S. ?Int;x) -> Char
(rec y:1S. ?Int;?Int;y) -> Char

[]
+{A: !Int, B: ?Char}
+{B: ?Char, A: !Int}

[]
+{A: ?Int, B: Skip;!Char}
+{B: Skip;!Char, A: ?Int}

[]
&{A: !Int;Skip, B: ?Char}
&{B: ?Char, A: !Int}

[]
&{A: ?Int, B: Skip;!Char}
&{B: Skip;!Char, A: ?Int}

[]
+{Leaf: Skip, Node: !Int};Skip
+{Leaf: Skip;Skip, Node: !Int;Skip}

[]
(Char, Int)
(Char, Int)

[]
(Char -> !Int, Int)
(Char -> !Int, Int)

-- Monoidal laws

[]
(!Int; ?Int); !Char
!Int; (?Int; !Char)

[]
!Int; (?Int; !Char)
(!Int; ?Int); !Char

[]
!Int; Skip
!Int

-- Non-empty kind environment

[("α", "1S")]
?Char; Skip
?Char

-- Distributivity

[("α", "1S")]
+{Leaf: Skip}; α
+{Leaf: α}

[("α", "1S")]
+{Node: !Int}; α
+{Node: !Int; α}

[("α", "1S")]
+{Leaf: Skip, Node: Skip}; α
+{Leaf: α, Node: α}

[("α", "1S")]
+{Leaf: Skip, Node: !Int}; α
+{Leaf: Skip; α, Node: !Int; α}

[("y", "1S")]
&{B: y ; y} ; ?Int
&{B: y ; y ; ?Int}

-- Some rec types

[]
rec x. rec y. (Skip; rec z. Skip; ?Int; Skip)
?Int

[]
rec x. rec y: 1S. (!Int; y)
rec z: 1S. (!Int; z)

[]
rec x: 1S. (rec y. !Int; x)
rec z: 1S. (!Int; z)

[]
rec x. rec y: 1S. rec z. (!Int; y)
rec w: 1S. (!Int; w)

[]
rec a : 1T . a 1-> a
rec a : 1T . a 1-> a

[]
!Char -> (rec x:1S. ?Int;x)
!Char -> (rec y:1S. ?Int;?Int;y)

[]
(rec y:1S. !Char;!Char;y) -> (rec x:1S. ?Int;x)
(rec y:1S. !Char;y) -> (rec y:1S. ?Int;?Int;y)

[]
(rec y:1S. !Char;!Char;y, Int)
(rec y:1S. !Char;y, Int)

-- not well formed?
[]
rec z:1T. (!Int, z)
rec z:1T. (!Int, z)

[]
!((rec y:1S. !Char;!Char;y) -> (rec x:1S. ?Int;x)) ; ?Int
!((rec y:1S. !Char;y) -> (rec y:1S. ?Int;?Int;y)) ; ?Int

-- How do we test variant types?
-- rec x . [Nil, Cons Int x]
-- rec y . [Cons Int y, Nil]

-- Regular Recursive Types

[]
rec x: 1S . (!Int;x)
rec x: 1S . (!Int;x)

[]
rec x: 1S . (!Int;x)
rec y: 1S . (!Int;y)

[]
rec x: 1S . (!Int;x)
rec x: 1S . (!Int; !Int;x)

[]
rec x . !Int
!Int

[]
rec x . !Int; Skip
Skip; !Int

[]
rec x . Skip; !Int
rec x . !Int; Skip

[]
rec x . Skip;!Int
!Int

[]
rec x: 1S. rec y. (!Int; x)
rec z. rec w: 1S. (!Int; w)

[]
rec x: 1S. rec y. (!Int; x)
rec w: 1S. (!Int; w)

-- Context-free Recursive Types, unnormed

[]
rec x: 1S. (!Int; x; x)
rec x: 1S. (!Int; x; x)

[]
rec x: 1S. rec y: 1S. (!Int; x; y)
rec w: 1S. rec z: 1S. (!Int; w; z)

[]
rec x: 1S. rec y: 1S. (!Int; x; y)
rec w: 1S. rec z: 1S. (!Int; w; ?Int; z)

[]
rec x: 1S . (?Int; x)
rec y: 1S . (?Int; y; !Int)

[]
rec x: 1S . (?Int; x)
rec y: 1S . (?Int; y; y)

[]
rec x: 1S . +{A: x}
rec y: 1S . +{A: y}; !Int

[]
rec x: 1S . +{A: x}; ?Int
rec y: 1S . +{A: y}; !Int

[]
rec x: 1S . (?Int; x)
rec y: 1S . (?Int; y; y; !Char; y; ?Int; y; y; ?Int; y; y)

[]
rec x: 1S. &{Node: ?Int;x}
rec x: 1S. &{Node: ?Int;x}

[]
rec x: 1S. &{Node: ?Int;x;x}
rec x: 1S. &{Node: ?Int;x}

[]
rec x: 1S . &{Add: x;x;!Int}
rec x: 1S . &{Add: x;x;!Int}

-- Context-free Recursive Types, normed

[]
rec x: 1S. &{Leaf: Skip, Node: ?Int;x}
rec x: 1S. &{Leaf: Skip, Node: ?Int;x}

[]
rec x: 1S. &{Leaf: ?Int, Node: ?Int;x;x}
rec x: 1S. &{Leaf: ?Int, Node: ?Int;x;x}

[]
rec x: 1S. &{Leaf: Skip, Node: ?Int;x;x}
rec x: 1S. &{Leaf: Skip, Node: ?Int;x;x}

[("α", "1S")]
rec x: 1S . +{A: α, B: x; α}
rec y: 1S . (+{A: Skip, B: y}; α)

[("α", "1S")]
rec y: 1S . (+{A: Skip, B: y}; α)
rec x: 1S . +{A: α, B: x; α}

[]
(rec x : 1S . &{Leaf: Skip, Node: ?Int;x;x}); (rec x : 1S . &{Leaf: Skip, Node: ?Int;x;x})
(rec x : 1S . &{Leaf: Skip, Node: ?Int;x;x}); (rec x : 1S . &{Leaf: Skip, Node: ?Int;x;x})

[]
rec x: 1S . &{Add: x;x, Const: Skip}
rec x: 1S . &{Add: x;x, Const: Skip}

[]
rec x: 1S . &{Add: x;x;Skip, Const: Skip}
rec x: 1S . &{Add: x;x;Skip, Const: Skip}

[]
rec x: 1S . &{Add: x;x;x, Const: Skip}
rec x: 1S . &{Add: x;x;x, Const: Skip}

[]
rec x: 1S . &{Add: x;x;!Int, Const: Skip}
rec x: 1S . &{Add: x;x;!Int, Const: Skip}

[]
rec x: 1S . &{Add: x;x;!Int, Const: ?Int}
rec x: 1S . &{Add: x;x;!Int, Const: ?Int}

[]
rec x: 1S . &{Add: x;x;!Int, Const: ?Int;!Int}
rec x: 1S . &{Add: x;x;!Int, Const: ?Int;!Int}

[]
rec x: 1S . &{Add: x;x;!Int, Const: ?Int;!Int, Mult: x;x;!Int}
rec x: 1S . &{Add: x;x;!Int, Const: ?Int;!Int, Mult: x;x;!Int}

[]
&{Add: (((rec x: 1S. &{Add: (x;x), Const: ?Int, Mult: (x;x)}));!Int), Const: Skip}
&{Add: (((rec x: 1S. &{Add: (x;x), Const: ?Int, Mult: (x;x)}));!Int), Const: Skip}

[]
&{Add: (((rec x: 1S. &{Add: x;x, Const: Skip}); (rec x: 1S. &{Add: x;x, Const: Skip})); !Int), Const: Skip}
&{Add: (((rec x: 1S. &{Add: x;x, Const: Skip}); (rec x: 1S. &{Add: x;x, Const: Skip})); !Int), Const: Skip}

[]
&{Add: rec x: 1S . &{Add: x;x, Const: Skip}; rec x: 1S. &{Add: x;x, Const: ?Int}; !Int, Const: Skip}
&{Add: rec x: 1S . &{Add: x;x, Const: Skip}; rec x: 1S. &{Add: x;x, Const: ?Int}; !Int, Const: Skip}

[]
&{Add: (rec x: 1S . &{Add: x;x, Const: Skip}; rec x: 1S. &{Add: x;x, Const: Skip}); !Int, Const: Skip}
&{Add: (rec x: 1S . &{Add: x;x, Const: Skip}; rec x: 1S. &{Add: x;x, Const: Skip}); !Int, Const: Skip}

[]
&{Add: (rec x: 1S . &{Add: x;x, Const: Skip}; rec x: 1S. &{Add: x;x, Const: ?Int}); !Int, Const: Skip}
&{Add: (rec x: 1S . &{Add: x;x, Const: Skip}; rec x: 1S. &{Add: x;x, Const: ?Int}); !Int, Const: Skip}

[]
&{Add: (((rec x: 1S. &{Add: (x;x), Const: ?Int, Mult: (x;x)});(rec x: 1S. &{Add: (x;x), Const: ?Int, Mult: (x;x)}));!Int), Const: ?Int;!Int, Mult: (((rec x: 1S. &{Add: (x;x), Const: ?Int, Mult: (x;x)});(rec x: 1S. &{Add: (x;x), Const: ?Int, Mult: (x;x)}));!Int)}
&{Add: (((rec x: 1S. &{Add: (x;x), Const: ?Int, Mult: (x;x)});(rec x: 1S. &{Add: (x;x), Const: ?Int, Mult: (x;x)}));!Int), Const: ?Int;!Int, Mult: (((rec x: 1S. &{Add: (x;x), Const: ?Int, Mult: (x;x)});(rec x: 1S. &{Add: (x;x), Const: ?Int, Mult: (x;x)}));!Int)}

[]
&{LeafC: (rec x: 1S . &{LeafC: Skip, NodeC: (?Int;(x;x))}), NodeC: ((?Int;((rec x: 1S . &{LeafC: Skip, NodeC: (?Int;(x;x))});(rec x: 1S . &{LeafC: Skip, NodeC: (?Int;(x;x))})));(rec x: 1S . &{LeafC: Skip, NodeC: (?Int;(x;x))}))}
&{LeafC: (rec x: 1S . &{LeafC: Skip, NodeC: (?Int;(x;x))}), NodeC: ((?Int;((rec x: 1S . &{LeafC: Skip, NodeC: (?Int;(x;x))});(rec x: 1S . &{LeafC: Skip, NodeC: (?Int;(x;x))})));(rec x: 1S . &{LeafC: Skip, NodeC: (?Int;(x;x))}))}

[]
((rec termChan: 1S . +{Add: (termChan;termChan), Const: !Int, Mult: (termChan;termChan)});!Int)
((rec termChan: 1S . +{Add: (termChan;termChan), Const: !Int, Mult: (termChan;termChan)});!Int)

[]
(rec x: 1S . &{A: !Int ; x, B: Skip}) ; (rec x: 1S . &{A: !Int ; x, B: Skip}) ; ?Int
(rec x: 1S . &{A: !Int ; x, B: Skip}) ; ((rec x: 1S . &{A: !Int ; x, B: Skip}) ; ?Int)

[]
(rec x: 1S . &{A: !Int ; x}) ; (rec x: 1S . &{A: !Int ; x}) ; ?Int
(rec x: 1S . &{A: !Int ; x}) ; ((rec x: 1S . &{A: !Int ; x}) ; ?Int)

[]
!Char ; (rec x: 1S . &{A: !Int ; x,  B: Skip}) ; ?Int
!Char ; ((rec x: 1S . &{A: !Int ; x, B: Skip}) ; ?Int)

-- This test is perfectly OK
[]
rec x: 1S . &{N: x; !Int, L: !Int}
(rec x: 1S . &{N: x; !Int, L: Skip}); !Int

[]
rec x: 1S . (&{N: x;!Int, L: Skip}; ?Int)
rec x: 1S . &{N: x;!Int;?Int, L: ?Int}

[]
rec x : 1S . &{N: x;!Int, L: x}
rec y : 1S . &{N: y, L: y};!Int

[]
&{And: (?Int;(?Int;(!Int;(rec x : 1S . &{And: (?Int;(?Int;(!Int;x))), Stop: Skip, Not: (?Int;(!Int;x)), Or: (?Int;(?Int;(!Int;x)))})))), Stop: Skip, Not: (?Int;(!Int;(rec x : 1S . &{And: (?Int;(?Int;(!Int;x))), Stop: Skip, Not: (?Int;(!Int;x)), Or: (?Int;(?Int;(!Int;x)))}))), Or: (?Int;(?Int;(!Int;(rec x : 1S . &{And: (?Int;(?Int;(!Int;x))), Stop: Skip, Not: (?Int;(!Int;x)), Or: (?Int;(?Int;(!Int;x)))}))))}
&{And: (?Int;(?Int;(!Int;(rec x : 1S . &{And: (?Int;(?Int;(!Int;x))), Stop: Skip, Not: (?Int;(!Int;x)), Or: (?Int;(?Int;(!Int;x)))})))), Stop: Skip, Not: (?Int;(!Int;(rec x : 1S . &{And: (?Int;(?Int;(!Int;x))), Stop: Skip, Not: (?Int;(!Int;x)), Or: (?Int;(?Int;(!Int;x)))}))), Or: (?Int;(?Int;(!Int;(rec x : 1S . &{And: (?Int;(?Int;(!Int;x))), Stop: Skip, Not: (?Int;(!Int;x)), Or: (?Int;(?Int;(!Int;x)))}))))}

[]
+{A: !Char, B: +{A: !Char}, C: +{A: !Int};!()}
+{A: !Char, B: +{A: !Char}, C: +{A: !Int;!()}}

[]
!Int; (?Int; !Char)
(!Int; ?Int); !Char

[]
((rec termChan:1S.&{Add: (termChan;termChan), Const: ?Int, Mult: (termChan;termChan)});(!Int;Skip))
((rec termChan:1S.&{Add: (termChan;termChan), Const: ?Int, Mult: (termChan;termChan)});!Int)

[("x", "1S")]
((rec termChan:1S.&{Add: (termChan;termChan), Const: ?Int, Mult: (termChan;termChan)});((rec termChan:1S.&{Add: (termChan;termChan), Const: ?Int, Mult: (termChan;termChan)});x))
(((rec termChan:1S.&{Add: (termChan;termChan), Const: ?Int, Mult: (termChan;termChan)});(rec termChan:1S.&{Add: (termChan;termChan), Const: ?Int, Mult: (termChan;termChan)}));x)

[("x", "1S")]
((rec termChan:1S.&{Add: (termChan;termChan), Const: ?Int, Mult: (termChan;termChan)});((rec termChan:1S.&{Add: (termChan;termChan), Const: ?Int, Mult: (termChan;termChan)});x))
(((rec termChan:1S.&{Add: (termChan;termChan), Const: ?Int, Mult: (termChan;termChan)});(rec termChan:1S.&{Add: (termChan;termChan), Const: ?Int, Mult: (termChan;termChan)}));x)

[]
((rec x:1S.+{A: (x;+{B: Skip}), B: Skip});Skip)
(rec x:1S.+{A: (x;+{B: Skip}), B: Skip})

[("α", "1S")]
((rec x:1S.+{A: (x;+{B: Skip}), B: Skip});α)
((rec x:1S.+{A: (x;+{B: Skip}), B: Skip});α)

[("α", "1S")]
α
(Skip;α)

[("α", "1S")]
((rec x:1S.+{A: (x;+{B: Skip}), B: Skip});(+{B: Skip};α))
(((rec x:1S.+{A: (x;+{B: Skip}), B: Skip});+{B: Skip});α)

[("α", "1S")]
((rec x:1S.&{A: (x;&{B: Skip}), B: Skip});Skip)
(rec x:1S.&{A: (x;&{B: Skip}), B: Skip})

[("α", "1S")]
((rec x:1S.&{A: (x;&{B: Skip}), B: Skip});(&{B: Skip};α))
(((rec x:1S.&{A: (x;&{B: Skip}), B: Skip});&{B: Skip});α)

[("α", "1S")]
((rec x:1S.&{A: (x;&{B: Skip}), B: Skip});α)
((rec x:1S.&{A: (x;&{B: Skip}), B: Skip});α)

[("α", "1S")]
&{And: (Skip;(?Int;(?Int;(!Int;Skip)))), Not: (Skip;(?Int;(!Int;Skip))), Or: (Skip;(?Int;(?Int;(!Int;Skip))))}
&{And: (?Int;(?Int;(!Int;Skip))), Not: (?Int;(!Int;Skip)), Or: (?Int;(?Int;(!Int;Skip)))}

[("α", "1S")]
((rec x:1S.&{LeafC: Skip, NodeC: (?Int;(x;(x;!Int)))});Skip)
(rec x:1S.&{LeafC: Skip, NodeC: (?Int;(x;(x;!Int)))})

[("α", "1S")]
((rec x:1S.+{LeafC: Skip, NodeC: (!Int;(x;(x;?Int)))});Skip)
(rec x:1S.+{LeafC: Skip, NodeC: (!Int;(x;(x;?Int)))})

[("α", "1S")]
((rec x:1S.+{LeafC: Skip, NodeC: (!Int;(x;(x;?Int)))});α)
((rec x:1S.+{LeafC: Skip, NodeC: (!Int;(x;(x;?Int)))});α)

[("α", "1S")]
((rec x:1S.&{LeafC: Skip, NodeC: (?Int;(x;(x;!Int)))});α)
((rec x:1S.&{LeafC: Skip, NodeC: (?Int;(x;(x;!Int)))});α)

[("α", "1S")]
((rec x:1S.+{Leaf: Skip, Node: (rec y:1S.&{Exit: Skip, Left: (x;y), Right: (x;y), Root: (!Int;y)})});((rec y:1S.&{Exit: Skip, Left: (+{Leaf: Skip, Node: y};y), Right: (+{Leaf: Skip, Node: y};y), Root: (!Int;y)});α))
(((rec x:1S.+{Leaf: Skip, Node: (rec y:1S.&{Exit: Skip, Left: (x;y), Right: (x;y), Root: (!Int;y)})});(rec y:1S.&{Exit: Skip, Left: ((rec x:1S.+{Leaf: Skip, Node: (rec y:1S.&{Exit: Skip, Left: (x;y), Right: (x;y), Root: (!Int;y)})});y), Right: ((rec x:1S.+{Leaf: Skip, Node: (rec y:1S.&{Exit: Skip, Left: (x;y), Right: (x;y), Root: (!Int;y)})});y), Root: (!Int;y)}));α)

[("α", "1S")]
((rec y:1S.&{Exit: Skip, Left: ((rec x:1S.+{Leaf: Skip, Node: (rec y:1S.&{Exit: Skip, Left: (x;y), Right: (x;y), Root: (!Int;y)})});y), Right: ((rec x:1S.+{Leaf: Skip, Node: (rec y:1S.&{Exit: Skip, Left: (x;y), Right: (x;y), Root: (!Int;y)})});y), Root: (!Int;y)});α)
((rec y:1S.&{Exit: Skip, Left: (+{Leaf: Skip, Node: y};y), Right: (+{Leaf: Skip, Node: y};y), Root: (!Int;y)});α)

[("α", "1S")]
((rec x:1S.+{Leaf: Skip, Node: (rec y:1S.&{Exit: Skip, Left: (x;y), Right: (x;y), Root: (!Int;y)})});((rec y:1S.&{Exit: Skip, Left: (+{Leaf: Skip, Node: y};y), Right: (+{Leaf: Skip, Node: y};y), Root: (!Int;y)});α))
(((rec x:1S.+{Leaf: Skip, Node: (rec y:1S.&{Exit: Skip, Left: (x;y), Right: (x;y), Root: (!Int;y)})});(rec y:1S.&{Exit: Skip, Left: ((rec x:1S.+{Leaf: Skip, Node: (rec y:1S.&{Exit: Skip, Left: (x;y), Right: (x;y), Root: (!Int;y)})});y), Right: ((rec x:1S.+{Leaf: Skip, Node: (rec y:1S.&{Exit: Skip, Left: (x;y), Right: (x;y), Root: (!Int;y)})});y), Root: (!Int;y)}));α)

[("α", "1S")]
((rec y:1S.&{Exit: Skip, Left: ((rec x:1S.+{Leaf: Skip, Node: (rec y:1S.&{Exit: Skip, Left: (x;y), Right: (x;y), Root: (!Int;y)})});y), Right: ((rec x:1S.+{Leaf: Skip, Node: (rec y:1S.&{Exit: Skip, Left: (x;y), Right: (x;y), Root: (!Int;y)})});y), Root: (!Int;y)});α)
((rec y:1S.&{Exit: Skip, Left: (+{Leaf: Skip, Node: y};y), Right: (+{Leaf: Skip, Node: y};y), Root: (!Int;y)});α)

[("α", "1S")]
((rec y:1S.&{Exit: Skip, Left: ((rec x:1S.+{Leaf: Skip, Node: (rec y:1S.&{Exit: Skip, Left: (x;y), Right: (x;y), Root: (!Int;y)})});y), Right: ((rec x:1S.+{Leaf: Skip, Node: (rec y:1S.&{Exit: Skip, Left: (x;y), Right: (x;y), Root: (!Int;y)})});y), Root: (!Int;y)});α)
((rec y:1S.&{Exit: Skip, Left: ((rec x:1S.+{Leaf: Skip, Node: (rec y:1S.&{Exit: Skip, Left: (x;y), Right: (x;y), Root: (!Int;y)})});y), Right: ((rec x:1S.+{Leaf: Skip, Node: (rec y:1S.&{Exit: Skip, Left: (x;y), Right: (x;y), Root: (!Int;y)})});y), Root: (!Int;y)});α)

[("α", "1S")]
((rec x:1S.+{Leaf: Skip, Node: (rec y:1S.&{Exit: Skip, Left: (x;y), Right: (x;y), Root: (!Int;y)})});α)
((rec x:1S.+{Leaf: Skip, Node: (rec y:1S.&{Exit: Skip, Left: (x;y), Right: (x;y), Root: (!Int;y)})});α)

[("α", "1S")]
((rec x:1S.+{Leaf: Skip, Node: (rec y:1S.&{Exit: Skip, Left: (x;y), Right: (x;y), Root: (!Int;y)})});Skip)
(rec z:1S.+{Leaf: Skip, Node: (rec x:1S.&{Exit: Skip, Left: (z;x), Right: (z;x), Root: (!Int;x)})})

[("α", "1S")]
((rec x:1S.&{Leaf: Skip, Node: (rec y:1S.+{Exit: Skip, Left: (x;y), Right: (x;y), Root: (?Int;y)})});Skip)
(rec x:1S.&{Leaf: Skip, Node: (rec y:1S.+{Exit: Skip, Left: (x;y), Right: (x;y), Root: (?Int;y)})})

[("α", "1S")]
((rec x:1S.&{Leaf: Skip, Node: (rec y:1S.+{Exit: Skip, Left: (x;y), Right: (x;y), Root: (?Int;y)})});α)
((rec x:1S.&{Leaf: Skip, Node: (rec y:1S.+{Exit: Skip, Left: (x;y), Right: (x;y), Root: (?Int;y)})});α)

[("α", "1S")]
((rec y:1S.+{Exit: Skip, Left: ((rec x:1S.&{Leaf: Skip, Node: (rec y:1S.+{Exit: Skip, Left: (x;y), Right: (x;y), Root: (?Int;y)})});y), Right: ((rec x:1S.&{Leaf: Skip, Node: (rec y:1S.+{Exit: Skip, Left: (x;y), Right: (x;y), Root: (?Int;y)})});y), Root: (?Int;y)});α)
((rec y:1S.+{Exit: Skip, Left: ((rec x:1S.&{Leaf: Skip, Node: (rec y:1S.+{Exit: Skip, Left: (x;y), Right: (x;y), Root: (?Int;y)})});y), Right: ((rec x:1S.&{Leaf: Skip, Node: (rec y:1S.+{Exit: Skip, Left: (x;y), Right: (x;y), Root: (?Int;y)})});y), Root: (?Int;y)});α)

[("α", "1S")]
((rec x:1S.&{Leaf: Skip, Node: (rec y:1S.+{Exit: Skip, Left: (x;y), Right: (x;y), Root: (?Int;y)})});((rec y:1S.+{Exit: Skip, Left: ((rec x:1S.&{Leaf: Skip, Node: (rec y:1S.+{Exit: Skip, Left: (x;y), Right: (x;y), Root: (?Int;y)})});y), Right: ((rec x:1S.&{Leaf: Skip, Node: (rec y:1S.+{Exit: Skip, Left: (x;y), Right: (x;y), Root: (?Int;y)})});y), Root: (?Int;y)});α))
(((rec x:1S.&{Leaf: Skip, Node: (rec y:1S.+{Exit: Skip, Left: (x;y), Right: (x;y), Root: (?Int;y)})});(rec y:1S.+{Exit: Skip, Left: ((rec x:1S.&{Leaf: Skip, Node: (rec y:1S.+{Exit: Skip, Left: (x;y), Right: (x;y), Root: (?Int;y)})});y), Right: ((rec x:1S.&{Leaf: Skip, Node: (rec y:1S.+{Exit: Skip, Left: (x;y), Right: (x;y), Root: (?Int;y)})});y), Root: (?Int;y)}));α)

[("α", "1S")]
((rec x:1S.&{Leaf: Skip, Node: (rec y:1S.+{Exit: Skip, Left: (x;y), Right: (x;y), Root: (?Int;y)})});((rec y:1S.+{Exit: Skip, Left: ((rec x:1S.&{Leaf: Skip, Node: (rec y:1S.+{Exit: Skip, Left: (x;y), Right: (x;y), Root: (?Int;y)})});y), Right: ((rec x:1S.&{Leaf: Skip, Node: (rec y:1S.+{Exit: Skip, Left: (x;y), Right: (x;y), Root: (?Int;y)})});y), Root: (?Int;y)});α))
(((rec x:1S.&{Leaf: Skip, Node: (rec y:1S.+{Exit: Skip, Left: (x;y), Right: (x;y), Root: (?Int;y)})});(rec y:1S.+{Exit: Skip, Left: ((rec x:1S.&{Leaf: Skip, Node: (rec y:1S.+{Exit: Skip, Left: (x;y), Right: (x;y), Root: (?Int;y)})});y), Right: ((rec x:1S.&{Leaf: Skip, Node: (rec y:1S.+{Exit: Skip, Left: (x;y), Right: (x;y), Root: (?Int;y)})});y), Root: (?Int;y)}));α)

[("α", "1S")]
&{And: (Skip;(?Int;(?Int;(!Int;Skip)))), Not: (Skip;(?Int;(!Int;Skip))), Or: (Skip;(?Int;(?Int;(!Int;Skip))))}
&{And: (?Int;(?Int;(!Int;Skip))), Not: (?Int;(!Int;Skip)), Or: (?Int;(?Int;(!Int;Skip)))}

[]
((rec x:1S.+{Done: Skip, More: (!Char;x)});Skip)
(rec y:1S.+{Done: Skip, More: (!Char;y)})

[]
((rec x:1S.&{Done: Skip, More: (?Char;x)});Skip)
(rec x:1S.&{Done: Skip, More: (?Char;x)})

[("α", "1S")]
((rec x:1S.&{Done: Skip, More: (?Char;x)});α)
((rec x:1S.&{Done: Skip, More: (?Char;x)});α)

[]
((rec x:1S.+{Leaf: Skip, Node: (!Int;(x;x))});Skip)
(rec x:1S.+{Leaf: Skip, Node: (!Int;(x;x))})

[]
((rec x:1S.&{Leaf: Skip, Node: (?Int;(x;x))});Skip)
(rec x:1S.&{Leaf: Skip, Node: (?Int;(x;x))})

[("a", "1S")]
((rec x:1S.&{Leaf: Skip, Node: (?Int;(x;x))});a)
((rec x:1S.&{Leaf: Skip, Node: (?Int;(x;x))});a)

[("a", "1S")]
((rec x:1S.+{Leaf: Skip, Node: (!Int;(x;x))});a)
((rec x:1S.+{Leaf: Skip, Node: (!Int;(x;x))});a)

[("a", "1S")]
&{And: (Skip;(?Int;(?Int;(!Int;Skip)))), Not: (Skip;(?Int;(!Int;Skip))), Or: (Skip;(?Int;(?Int;(!Int;Skip))))}
&{And: (?Int;(?Int;(!Int;Skip))), Not: (?Int;(!Int;Skip)), Or: (?Int;(?Int;(!Int;Skip)))}

[("a", "1S")]
!((rec y:1S. !Char;!Char;y) , (rec x:1S. ?Int;x)) ; ?Int
!((rec y:1S. !Char;y) , (rec y:1S. ?Int;?Int;y)) ; ?Int

-- Examples from QuickCheck

[("x", "1S"), ("z", "1S")]
(!Char;(+{A: z, B: z, C: z};(rec z_0: 1S. ((rec y_1: 1S. x);(Skip;x)))))
((!Char;+{A: z, B: z, C: z});(rec z_2: 1S. ((rec y_3: 1S. x);(Skip;x))))

[("x", "1S")]
rec y: 1S. x
rec z: 1S. x

-- This one is non-kinded (as of version April 24, 2019)
--[]
--((rec z_0:1S. (((Skip;z_0);?Char);&{A: y, B: y, C: z_0}));((?Int;(rec x_1:1S. +{A: x_1, B: Skip, C: y}));+{A: (rec y_2:1S. Skip), B: ?Int, C: !Int}))
--(((rec z_3:1S. (((Skip;z_3);?Char);&{A: y, B: y, C: z_3}));(?Int;(rec x_4:1S. +{A: x_4, B: Skip, C: y})));+{A: (rec y_5:1S. Skip), B: ?Int, C: !Int})

[("x", "1S"),("z", "1S")]
 (rec y_0: 1S. (!Int;+{A: y_0, B: y_0, C: x})) ; (?Int ; (?Int;&{A: Skip, B: z, C: z}))
((rec y_1: 1S. (!Int;+{A: y_1, B: y_1, C: x})) ; ?Int) ; (?Int;&{A: Skip, B: z, C: z})

-- this one used to hang
[]
rec y_0: 1S. !Int; +{A: y_0}
rec y_1: 1S. !Int; +{A: y_1}

-- this one used to hang
[]
rec y_0: 1S. !Char ; +{A: y_0, B: Skip, C: Skip}
!Char; +{A: (rec y_1: 1S. (!Char;+{A: y_1, B: Skip, C: Skip})), B: Skip, C: Skip}

[("x","1S"),("y","1S"),("z","1S")]
!Char ; !Int ; &{A: x, B: z} ; &{A: Skip} ; ?() ; &{B: y}
!Char ; !Int ; &{A: x, B: z} ; &{A: Skip} ; ?() ; &{B: y}

-- Unfold

[]
rec x. !Int ; !Int
!Int ; !Int

[("y","1S"),("z","1S")]
rec x: 1S. (((z;z);(Skip;y));?Int)
((z;z);(Skip;y));?Int

[("z","1S")]
((rec x: 1S. (rec y: 1S. z)) ; &{B: ?Int, C: ?Char}) ; +{A: Skip, B: !Char, C: Skip}
((rec u: 1S. (rec v: 1S. z)) ; &{B: ?Int, C: ?Char}) ; +{A: Skip, B: !Char, C: Skip}

[]
rec x: 1S. &{B:Skip, C: x} ;+{D: ?Char}
rec y: 1S. &{B:+{D: ?Char}, C: y ;+{D: ?Char}}

[]
(rec x: 1S. +{LeafC: Skip, NodeC: x ; x}) ; Skip
 rec y: 1S. +{LeafC: Skip, NodeC: y ; y}

[("α", "1S")]
rec x: 1S. α
rec y: 1S. α

[("x", "1S")]
rec y_0: 1S. (rec y_1: 1S. (rec y_2: 1S. x))
rec z: 1S. (rec y_4: 1S. x)

[]
&{A: !Char, B: ?Int}
&{A: !Char, B: ?Int}

[("x", "1S")]
x
x ; Skip

[("z", "1S")]
(+{A: z};(rec d: *S. +{A: Skip, B: !Char}))
+{A: (z;(rec x_1: *S. +{A: Skip, B: !Char}))}

[("y", "1S")]
(&{A: (Skip;Skip), B: y};(Skip;&{A: ?Int, B: Skip}))
&{A: ((Skip;Skip);&{A: ?Int, B: Skip}), B: (y;&{A: ?Int, B: Skip})}

[("y", "1S")]
(Skip;(rec x_0: 1S. (rec x_1: 1S. y)))
(rec x_2: 1S. y)

[]
rec a: 1S. &{A: rec b. a}
&{A: rec c: 1S. &{A: c}}

[("y", "1S")]
(Skip;(rec x_0: 1S. (rec x_1: 1S. y)))
(rec x_2: 1S. y)

[("y", "1S")]
((rec d_0: 1S. y);Skip)
(rec d_1: 1S. y)

[("x","1S"),("y","1S")]
(&{A: ?Int, C: (rec b: 1S. ?Char)};(rec a: *S. &{B: (((rec c: 1S. (&{A: y};(?Int;!Char)));y);x)}))
&{A: (?Int;&{B: ((rec b: 1S. (&{A: (y;(?Int;!Char))};y));x)}), C: (?Char;&{B: ((rec d: 1S. (&{A: (y;(?Int;!Char))};y));x)})}

[]
rec a: 1S. (&{B: Skip, C: (rec d: 1S. (a;!Int))})
rec e: 1S. (&{B: Skip, C: e;!Int})

[("x","1S"),("y","1S"),("z","1S")]
((&{B: (((+{B: (Skip;x), C: (z;x)};&{A: x, B: Skip});Skip);+{A: (((Skip;!());((Skip;!Int);x));(rec w: *S. ?Char)), B: (+{A: (z;+{A: (y;(Skip;y)), C: (Skip;(Skip;y))}), C: (z;+{A: (y;(Skip;y)), C: (Skip;(Skip;y))})};(rec o: *S. ?Char)), C: (x;(rec r: *S. ?Char))})};Skip);Skip)
((Skip;(&{B: ((rec h: *S. (rec l: *S. (rec p: 1S. (+{B: Skip, C: z};x))));((Skip;&{A: x, B: Skip});Skip))};(+{A: (Skip;(!();(Skip;(!Int;x)))),B: (+{A: z, C: z};(+{A: y, C: Skip};(Skip;y))), C: x};(rec q: *S. ?Char))));(Skip;Skip))

[]
rec z_0: 1S. &{B: &{B: ?()}, C: (rec y_0: 1S. (z_0;y_0))}
&{B: &{B: ?()}, C: (rec y_1: 1S. ((rec z_1: 1S. &{B: &{B: ?()}, C: (rec y_3: 1S. ((z_1;Skip);y_3))});y_1))}

[]
(rec z_0: 1S. (rec x_1: 1S. ( (+{B: (rec w_1: 1S. +{A: Skip, C: w_1}), C:   (rec w_3: 1S. +{A: (!Int;w_3), B: !Char, C: !Char})});(+{B: !Int, C: z_0};x_1))))
(rec w_7: 1S. ( +{B: +{A: Skip, C: (rec w_10: 1S. +{A: Skip, C: w_10})}, C: rec w_12: 1S. +{A: !Int;w_12, B: !Char, C: !Char}};+{B: (!Int;w_7), C: (w_7;w_7)}))

[]
rec x_0: 1S. +{B: &{B: !Int};!Char, C: rec w_1: 1S. (x_0;(?();w_1))}
rec y_8: 1S. +{B: &{B: !Int};!Char, C: (y_8;?());(rec w_0: 1S. ((y_8;?());w_0))}

[]
((rec x_0: 1S. (rec y_1: 1S. +{B: ((rec w_0: 1S. &{B: !Int});(rec w_1: 1S. (rec w_2: 1S. (rec w_3: 1S. (rec w_4: 1S. !Char))))), C: (rec w_5: 1S. (x_0;(?();w_5)))}));Skip)
(rec y_8: 1S. +{B: ((rec r_1: 1S. &{B: !Int});(rec r_2: 1S. (rec r_3: 1S. (rec r_4: 1S. !Char)))), C: ((y_8;?());(rec r_5: 1S. ((y_8;?());r_5)))})

[]
rec x: 1S. !Int; rec y: 1S. x;y
rec z: 1S. !Int; rec w: 1S. z;w

[("y","1S")]
+{B: ?Int, C: y};+{A: ?Int, B: (+{A: Skip};?Int), C: y}
+{B: (?Int;+{A: ?Int, B: +{A: (Skip;?Int)}, C: y}), C: (y;+{A: ?Int, B: +{A: (Skip;?Int)}, C: y})}

[("z","1S")]
+{A: z, B: +{A: z}, C: (+{A: !Int};!())}
+{A: z, B: +{A: z}, C: +{A: (!Int;!())}}

[]
+{A: Skip, B: Skip} ; +{A: Skip, B: Skip}
+{A: +{A:Skip, B: Skip}, B: +{A: Skip, B: Skip}}

[("z","1S")]
(rec y: 1S.(&{A: z, C: ?Char};(&{A: !Int, B: !Int, C: Skip};y)))
&{A: (z;&{A: (!Int;(rec y1: 1S.&{A: (z;&{A: (!Int;y1), B: (!Int;y1), C: (Skip;y1)}), C: (?Char;&{A: (!Int;y1), B: (!Int;y1), C: (Skip;y1)})})), B: (!Int;(rec y2: 1S.&{A: (z;&{A: (!Int;y2), B: (!Int;y2), C: (Skip;y2)}), C: (?Char;&{A: (!Int;y2), B: (!Int;y2), C: (Skip;y2)})})), C: (Skip;(rec y3: 1S.&{A: (z;&{A: (!Int;y3), B: (!Int;y3), C: (Skip;y3)}), C: (?Char;&{A: (!Int;y3), B: (!Int;y3), C: (Skip;y3)})}))}), C: (?Char;&{A: (!Int;(rec y4: 1S.&{A: (z;&{A: (!Int;y4), B: (!Int;y4), C: (Skip;y4)}), C:(?Char;&{A: (!Int;y4), B: (!Int;y4), C: (Skip;y4)})})), B: (!Int;(rec y5: 1S.&{A: (z;&{A: (!Int;y5), B: (!Int;y5), C: (Skip;y5)}), C: (?Char;&{A: (!Int;y5), B: (!Int;y5), C: (Skip;y5)})})), C: (Skip;(rec y6: 1S.&{A: (z;&{A: (!Int;y6), B: (!Int;y6), C: (Skip;y6)}), C: (?Char;&{A: (!Int;y6), B: (!Int;y6), C: (Skip;y6)})}))})}

[("z","1S")]
((rec y0: 1S.(+{A: z, C: ?Int};(&{B: y0, C: z};y0)));Skip)
+{A: (z;&{B: ((rec y10: 1S.+{A: (z;&{B: (y10;y10), C: (z;y10)}), C: (?Int;&{B: (y10;y10), C: (z;y10)})});(rec y21: 1S.+{A: (z;&{B: (y21;y21), C: (z;y21)}), C: (?Int;&{B: (y21;y21), C: (z;y21)})})), C: (z;(rec y32: 1S.+{A: (z;&{B: (y32;y32), C: (z;y32)}), C: (?Int;&{B: (y32;y32), C: (z;y32)})}))}), C: (?Int;&{B: ((rec y43: 1S.+{A: (z;&{B: (y43;y43), C: (z;y43)}), C: (?Int;&{B: (y43;y43), C: (z;y43)})});(rec y54: 1S.+{A: (z;&{B: (y54;y54), C: (z;y54)}), C: (?Int;&{B: (y54;y54), C: (z;y54)})})), C: (z;(rec y65: 1S.+{A: (z;&{B: (y65;y65), C: (z;y65)}), C: (?Int;&{B: (y65;y65), C: (z;y65)})}))})}

[]
(+{A: !Int, B: !()};(rec z0: 1S.(+{A: Skip, B: ?Int, C: ?Char};z0)))
+{A: (!Int;+{A: (Skip;(rec z10: 1S.+{A: (Skip;z10), B: (?Int;z10), C: (?Char;z10)})), B: (?Int;(rec z21: 1S.+{A: (Skip;z21), B: (?Int;z21), C: (?Char;z21)})), C: (?Char;(rec z32: 1S.+{A: (Skip;z32), B: (?Int;z32), C: (?Char;z32)}))}), B: (!();+{A: (Skip;(rec z40: 1S.+{A: (Skip;z40), B: (?Int;z40), C: (?Char;z40)})), B: (?Int;(rec z51: 1S.+{A: (Skip;z51), B: (?Int;z51), C: (?Char;z51)})), C: (?Char;(rec z62: 1S.+{A: (Skip;z62), B: (?Int;z62), C: (?Char;z62)}))})}

[]
((Skip;(rec z: 1S.(rec y: 1S.(rec x: 1S.(+{A: z, B: Skip, C: !Int};(&{A:Skip, C: z};x))))));Skip)
(rec y: 1S.+{A: (y;&{A: (Skip;(rec x: 1S.+{A: (y;&{A: (Skip;x), C:(y;x)}), B: (Skip;&{A: (Skip;x), C: (y;x)}), C: (!Int;&{A: (Skip;x),C: (y;x)})})), C: (y;(rec x: 1S.+{A: (y;&{A: (Skip;x), C: (y;x)}), B:(Skip;&{A: (Skip;x), C: (y;x)}), C: (!Int;&{A: (Skip;x), C:(y;x)})}))}), B: (Skip;&{A: (Skip;(rec x: 1S.+{A: (y;&{A: (Skip;x), C:(y;x)}), B: (Skip;&{A: (Skip;x), C: (y;x)}), C: (!Int;&{A: (Skip;x),C: (y;x)})})), C: (y;(rec x: 1S.+{A: (y;&{A: (Skip;x), C: (y;x)}), B:(Skip;&{A: (Skip;x), C: (y;x)}), C: (!Int;&{A: (Skip;x), C:(y;x)})}))}), C: (!Int;&{A: (Skip;(rec x: 1S.+{A: (y;&{A: (Skip;x), C:(y;x)}), B: (Skip;&{A: (Skip;x), C: (y;x)}), C: (!Int;&{A: (Skip;x),C: (y;x)})})), C: (y;(rec x: 1S.+{A: (y;&{A: (Skip;x), C: (y;x)}), B:(Skip;&{A: (Skip;x), C: (y;x)}), C: (!Int;&{A: (Skip;x), C:(y;x)})}))})})

[]
(rec z:*S.(rec y:1S.(rec x:1S.(rec z:1S.(&{A: x, B: ?Char, C: !Int};(&{A: ?Char, B: !(), C: y};z))))))
(rec z:*S.(rec z:1S.&{A: (z;&{A: (?Char;z), B: (!();z), C: (z;z)}), B: (?Char;&{A: (?Char;z), B: (!();z), C: (z;z)}), C: (!Int;&{A: (?Char;z), B: (!();z), C: (z;z)})}))

-- forall

[]
∀ α: 1S . α -> α
∀ β: 1S . β -> β

[]
Int -> ∀ α: 1S . α -> α
Int -> ∀ α: 1S . α -> α

[("α", "*T")]
∀ β: 1S . β -> α
∀ β: 1S . β -> α

[]
Int -> ∀ α: 1S . α -> α ; Skip
Int -> ∀ α: 1S . α -> α

[]
Int -> ∀ α: 1S . α -> α ; (α ; α)
Int -> ∀ α: 1S . α -> (α ; α) ; α

[]
rec y:1S .             +{B: !(), C: !Int} ; (+{A: y;!(), C: !()} ; y)
rec x:1S . rec y:1S .  +{B: !(), C: !Int} ; ((+{A: y, C: Skip};!())  ; x)

[("z", "1S")]
rec y:1S . (+{B: z, C: !Char};(?();!Int);+{A: y;!(), C: Skip;!()});!Int;y
rec y:1S . rec x:1S . (+{B: z, C: !Char});(?();!Int;+{A: y, C: Skip};!());!Int;x

[("z","1S")]
rec y:1S . (+{B: z;Skip, C: !Char;Skip};(?();!Int);+{A: y;!(), C: Skip;!()});!Int;y
rec y:1S . rec x:1S . (+{B: z, C: !Char};Skip;Skip);(?();!Int;+{A: y, C: Skip};!());!Int;x

[]
!(forall a . a) ; Skip
!(forall b . b)

[]
!(∀a . a -> a) -> Skip
!(∀b . b -> b) -> Skip ; Skip

[]
!(∀a . (rec b:1S . !Int ; b) -> a) -> Skip
!(∀c . (rec d:1S . Skip; !Int ; d) -> c) -> Skip ; Skip

[]
∀a:1S . ∀b:1S . ∀c:1S . (rec d:1S . &{Dollar: Skip, Lt: (rec t:1S . &{Gt: Skip, Lt: t ; t}) ; d}) ; a -> (rec d:1S . &{Dollar: Skip, Lt: (rec t:1S . &{Gt: Skip, Lt: t ; t}) ; d}) ; b 1-> (rec d:1S . +{Dollar: Skip, Lt: (rec t:1S . +{Gt: Skip, Lt: t ; t}) ; d}) ; c 1-> (a, (b, c))
∀a:1S . ∀b:1S . ∀c:1S . (rec d:1S . &{Dollar: Skip, Lt: (rec t:1S . &{Gt: Skip, Lt: t ; t}) ; d}) ; a -> (rec d:1S . &{Dollar: Skip, Lt: (rec t:1S . &{Gt: Skip, Lt: t ; t}) ; d}) ; b 1-> (rec d:1S . +{Dollar: Skip, Lt: (rec t:1S . +{Gt: Skip, Lt: t ; t}) ; d}) ; c 1-> (Skip ; a, (b, c))

[]
∀a:1S . ∀c:1S . c 1-> a
∀a:1S . ∀c:1S . c 1-> Skip ; a

-- exists - dual of the above

[]
exists counterType: *T . (counterType, (counterType -> Bool, (counterType -> counterType, counterType -> counterType)))
exists counterType: *T . (counterType, (counterType -> Bool, (counterType -> counterType, counterType -> counterType)))

[("counterType","*T")]
(counterType, (counterType -> Bool, (counterType -> counterType, counterType -> counterType)))
(counterType, (counterType -> Bool, (counterType -> counterType, counterType -> counterType)))

[]
exists α: 1S . α -> α
exists β: 1S . β -> β

[]
Int -> exists α: 1S . α -> α
Int -> exists α: 1S . α -> α

[("α", "*T")]
exists β: 1S . β -> α
exists β: 1S . β -> α

[]
Int -> exists α: 1S . α -> α ; Skip
Int -> exists α: 1S . α -> α

[]
Int -> exists α: 1S . α -> α ; (α ; α)
Int -> exists α: 1S . α -> (α ; α) ; α

[]
!(∃a . a) ; Skip
!(∃b . b)

[]
!(∃a . a -> a) -> Skip
!(∃b . b -> b) -> Skip ; Skip

[]
!(∃a . (rec b:1S . !Int ; b) -> a) -> Skip
!(∃c . (rec d:1S . Skip; !Int ; d) -> c) -> Skip ; Skip

[]
∃a:1S . ∃b:1S . ∃c:1S . (rec d:1S . &{Dollar: Skip, Lt: (rec t:1S . &{Gt: Skip, Lt: t ; t}) ; d}) ; a -> (rec d:1S . &{Dollar: Skip, Lt: (rec t:1S . &{Gt: Skip, Lt: t ; t}) ; d}) ; b 1-> (rec d:1S . +{Dollar: Skip, Lt: (rec t:1S . +{Gt: Skip, Lt: t ; t}) ; d}) ; c 1-> (a, (b, c))
∃a:1S . ∃b:1S . ∃c:1S . (rec d:1S . &{Dollar: Skip, Lt: (rec t:1S . &{Gt: Skip, Lt: t ; t}) ; d}) ; a -> (rec d:1S . &{Dollar: Skip, Lt: (rec t:1S . &{Gt: Skip, Lt: t ; t}) ; d}) ; b 1-> (rec d:1S . +{Dollar: Skip, Lt: (rec t:1S . +{Gt: Skip, Lt: t ; t}) ; d}) ; c 1-> (Skip ; a, (b, c))

[]
∃a:1S . ∃c:1S . c 1-> a
∃a:1S . ∃c:1S . c 1-> Skip ; a

-- Mixing forall and exists

[]
∀a:1S . ∃c:1S . c 1-> a
∀a:1S . ∃c:1S . c 1-> Skip ; a

[]
∃a:1S . ∀c:1S . ∃c:1S . c 1-> a
∃a:1S . ∀c:1S . ∃c:1S . c 1-> Skip ; a

[]
∃a:1S . ∀b:1S . ∃c:1S . (rec d:1S . &{Dollar: Skip, Lt: (rec t:1S . &{Gt: Skip, Lt: t ; t}) ; d}) ; a -> (rec d:1S . &{Dollar: Skip, Lt: (rec t:1S . &{Gt: Skip, Lt: t ; t}) ; d}) ; b 1-> (rec d:1S . +{Dollar: Skip, Lt: (rec t:1S . +{Gt: Skip, Lt: t ; t}) ; d}) ; c 1-> (a, (b, c))
∃a:1S . ∀b:1S . ∃c:1S . (rec d:1S . &{Dollar: Skip, Lt: (rec t:1S . &{Gt: Skip, Lt: t ; t}) ; d}) ; a -> (rec d:1S . &{Dollar: Skip, Lt: (rec t:1S . &{Gt: Skip, Lt: t ; t}) ; d}) ; b 1-> (rec d:1S . +{Dollar: Skip, Lt: (rec t:1S . +{Gt: Skip, Lt: t ; t}) ; d}) ; c 1-> (Skip ; a, (b, c))

-- Higher-order

[]
!Skip
!Skip

[]
!(Int -> rec x:1S. ?Int;x)
!(Int -> rec y:1S. ?Int;?Int;y)

[]
rec x:1S . !x
rec x:1S . !x

[("x","1S"), ("y","1S"), ("z","1S")]
rec z:1S . (!Skip ; (rec x:1S . !x))
rec z:1S . rec y:1S . !Skip ; (rec x:1S . !x)

[("x","1S"), ("y","1S"), ("z","1S")]
rec z:1S . (rec x:1S . !x) ; &{A: z ; &{B: x ; z}, B: Skip ; &{B: x ; z}, C: Skip ; &{B: x ; z}}
rec z:1S . rec y:1S . (rec x:1S . !x) ; &{A: z, B: Skip, C: Skip} ; &{B: x} ; y

[]
rec x:1S . !Skip; x; x 
rec x:1S . !Skip; x; x 

-- These 2 tests used to hang

[]
rec z:1S . !Skip ; (rec x:1S . !x) ; &{A: z, B: z}
rec z:1S . !Skip ; (rec x:1S . !x) ; &{A: z, B: Skip} ; z

[("x","1S"), ("y","1S"), ("z","1S")]
rec z:1S . (!Skip ; (rec x:1S . !x)) ; &{A: z ; &{B: x ; z}, B: Skip ; &{B: x ; z}, C: Skip ; &{B: x ; z}}
rec z:1S . rec y:1S . !Skip ; (rec x:1S . !x) ; &{A: z, B: Skip, C: Skip} ; &{B: x} ; y

[]
?((Skip; Skip); ?Int)
?(?Int)

[]
!(rec x:1S . &{Leaf: Skip, Node: (?Int;(x;x))} ; Skip)
!(rec y:1S . &{Leaf: Skip, Node: (?Int;(y;y))})

[("a","1S")]
!((rec x:1S . &{Leaf: Skip, Node: (?Int;(x;x))});Skip) ; ?((rec x:1S . +{Leaf: Skip, Node: (!Int;(x;x))});a)
!( rec y:1S . &{Leaf: Skip, Node: (?Int;(y;y))})       ; ?((rec y:1S . +{Leaf: Skip, Node: (!Int;(y;y))});a)

[]
rec x:1S. !x
rec y:1S. !y

[]
rec x:1S. !x
rec y:1S. (!y ; Skip)

[]
rec x:1S. !x
(rec y:1S. !y) ; Skip

[]
!(rec x:1S. !x)
!(rec y:1S. !y)

[]
rec x:1S. !x
!(rec x:1S. !x)

[]
rec x:1S. !x
!(!(!(rec y:1S. !y)))

[]
(Int, !Int;Skip) -> (!(Char 1-> ?(Int, !((Int, !Int) -> (!(Char 1-> ?(Int, !Int);Skip))))))
(Int, !Int) -> (!(Char 1-> ?(Int, !((Int, Skip;(!Int;Skip)) -> (!(Char 1-> ?(Int, !Int)))))))

-- Two alpha-equivalent types
[]
!(forall a . a)
!(forall b . b)

-- Dualof

[("z","1S")]
dualof z
dualof z

[]
rec x:1S . !dualof x
rec x:1S . !dualof x

[]
rec x:1S . !dualof x
rec x:1S . Skip ; !dualof x

[]
(dualof !Int)
?Int

[]
dualof !Int ; Skip
?Int

[]
dualof (!Int ; ?Char)
?Int ; !Char

[]
(Int, !Int;Skip) -> (!(Char 1-> ?(Int, !((Int, !Int) -> (!(Char 1-> dualof dualof ?(Int, !Int);Skip))))))
(Int, !Int) -> (!(Char 1-> ?(Int, !((Int, Skip;(!Int;Skip)) -> (!(Char 1-> ?(Int, !Int)))))))

[]
((Skip;(rec z: 1S.(rec y: 1S.(rec x: 1S.(+{A: z, B: Skip, C: dualof ?Int};(&{A:Skip, C: z};x))))));Skip)
(rec y: 1S.+{A: (y;&{A: (Skip;(rec x: 1S.+{A: (y;&{A: (Skip;x), C:(y;x)}), B: (Skip;&{A: (Skip;x), C: (y;x)}), C: (!Int;&{A: (Skip;x),C: (y;x)})})), C: (y;(rec x: 1S.+{A: (y;&{A: (Skip;x), C: (y;x)}), B:(Skip;&{A: (Skip;x), C: (y;x)}), C: (!Int;&{A: (Skip;x), C:(y;x)})}))}), B: (Skip;&{A: (Skip;(rec x: 1S.+{A: (y;&{A: (Skip;x), C:(y;x)}), B: (Skip;&{A: (Skip;x), C: (y;x)}), C: (!Int;&{A: (Skip;x),C: (y;x)})})), C: (y;(rec x: 1S.+{A: (y;&{A: (Skip;x), C: (y;x)}), B:(Skip;&{A: (Skip;x), C: (y;x)}), C: (!Int;&{A: (Skip;x), C:(y;x)})}))}), C: (!Int;&{A: (Skip;(rec x: 1S.+{A: (y;&{A: (Skip;x), C:(y;x)}), B: (Skip;&{A: (Skip;x), C: (y;x)}), C: (!Int;&{A: (Skip;x),C: (y;x)})})), C: (y;(rec x: 1S.+{A: (y;&{A: (Skip;x), C: (y;x)}), B:(Skip;&{A: (Skip;x), C: (y;x)}), C: (!Int;&{A: (Skip;x), C:(y;x)})}))})})

-- dual and recursion on messages
[]
(rec a:1S . +{A: !Char, B: a ; a}) ; ?Int ; Close
(rec a:1S . +{A: !Char, B: a ; a}) ; ?Int ; Close

[]
dualof (rec a:1S . !a                       ; Close)
        rec b:1S . ?(rec a:1S . !a ; Close) ; Wait

-- Terminated Recursive Types

[]
rec b:1S . Skip
Skip

[]
rec b:1S . Skip
rec b:1S . rec b:1S . Skip

-- Ill-formed - TODO: should be well-formed
[]
rec x:*S. Skip
Skip

-- Ill-formed - TODO: should be well-formed
[]
Skip
rec x:*S. Skip

-- Ill-formed - TODO: should be well-formed
[]
rec x:*S. (Skip; Skip)
Skip

-- Ill-formed - TODO: should be well-formed
[]
rec x:*S. rec y. Skip
Skip

-- Ill-formed - TODO: should be well-formed
[]
rec x:*S. (Skip; rec y. Skip)
Skip


-- Ill-formed - TODO: should be well-formed
[]
rec x.Skip
rec x. Skip

-- Ill-formed - TODO: should be well-formed
[]
rec x.Skip
Skip; rec x.Skip

-- Ill-formed - TODO: should be well-formed
[]
rec x.Skip
Skip

-- Skip^omega
[]
rec x:1S.(+{A: Skip, C: x} ; rec z3:*S.(rec y:1S.(Skip;(z3;?Int))))
rec z:*S.(+{A: Skip, C: z} ; rec y:1S.(Skip;y);?Int) 

-- Skip^omega
[]
Skip
rec y:1S. (Skip ; y) ; ?Int

-- Skip^omega
[]
rec y:1S. (Skip ; y) ; ?Int
Skip 

-- Skip^omega
[]
Skip
(rec y:1S. Skip ; y) ; ?Int

-- Skip^omega
[]
rec y:1S. Skip ; y ; ?Int
Skip ; (rec y:1S. Skip ; y ; ?Int) ; ?Int

-- Star (unrestricted session) types

[]
*!Int
rec a:*S . !Int ; a

[]
forall a:1S . *!a
forall a:1S . rec x:*S . !a ; x

[]
*?Int
rec x:*S . ?Int ; x

[]
forall a:1S . *?a
forall a:1S . rec x:*S . ?a ; x

[]
*+{A, B, C}
rec x:*S . +{A:x, B:x, C:x}

[]
*&{A, B, C}
rec x:*S . &{A:x, B:x, C:x}

[]
*!Int ; !Int
*!Int

[]
*!Int ; !Char
*!Int

[]
*!Int ; ?Char
*!Int

[]
*!(*?!Int)
*!(*?(Skip;!Int))

[]
*!(*?*?Int)
*!(*?(rec a:*S . ?Int ; a))

[]
*!(*?*+{A,B})
*!(*?(*+{A,B};Skip))

[]
!Int ; *!Int
*!Int

-- Un vs. Lin types

[]
(rec a:1S . !Int ; a)
(rec a:*S . !Int ; a)

[]
(rec a:1S . ?((rec a:1S . +{A: !Char, B: a ; a}) ; ?Int ; Close) ; a)
(rec a:*S . ?((rec a:1S . +{A: !Char, B: a ; a}) ; ?Int ; Close) ; a)

[]
(rec a:1S . +{A: a})
(rec a:*S . +{A: a})

[]
(rec a:1S . &{A: a})
(rec a:*S . &{A: a})

-- Forall and Close/Wait

-- []
-- forall b . Wait
-- forall b . rec a . Wait ; a
