ex_01-1b
    Not possible to do (expression) and (expression) and (expression)   example:
        (x > 1) && (x > 2) && (x > 3)
    Should do ((expression) and (expression)) and (expression)          example:
        ((x > 1) && (x > 2)) && (x > 3)
    FIXED

ex_01-3
    Two consecutive zeros work as two different zeros                    example:
        00 = 0 0
    FIXED

ex_01-5
    Impossible to create, as example, (:) or (^) functions              example:
        (^) : Int -> Int -> Int

ex_01-5
    Impossible to import files/methods from different classes           example:
        import "ex_01-5"

ex_01-6a
    Not possible to apply equals to Char Types                          example:
        'a' == 'b' or (==) 'a' 'b'

ex_01-8c
    Not possible to apply equals to Char Types, 
    ord method (Char -> Int, char's ordinal) inexistent                 example:
        'a' == 'b' or (ord a) == (ord b)

ex_01-8d
    No not equals implemented besides not a == b                        example:
        inexistent '/='
    FIXED

ex_01-11a
    No other method besides "div" to divide numbers                     example:
        "/" or ":"

ex_01-12
    Overflow on integers beyond 2^62 (should it warn us when it does?) example:
        2^63 = -9223372036854775808
        2^64 = 0
        2^65 = 0

ex_03-10
    Double or Long types inexistent                                     example:
        data DL = D Double | L Long
        x = 1.1
        x = 2.2

ex_03-10
    Cannot calculate actual square roots,
    because there's no decimal numbers                                  example:
        sqrt 4
        sqrt 2

ex_05-1f
    There's no breakline character                                      example:
        '\n'
    FIXED

ex_05-3e
    We cannot say that an element is made of another                    example:
        data IntList = End | List Int IntList
        data IntListList = LEnd | LList IntList IntListList

        something [IntListList,IntList]
        something : forall a,b => a -> b *
        something : forall a => [a] -> a
        *we can't securelly fo through 'a' thinking it is made of 'b'

ex_06-1
    Cannot create lambda function when main return Type is a data 
    Type created by user                                                example:

        data Tuple = Tuple Int Int 
        main : Tuple
        main =
            let f = (\x : Int -> x) in
            Tuple 0 0
    FIXED

ex_07-4
    Cannot test Boolean equality                                       example:
        True /= False
        True == (not False)
