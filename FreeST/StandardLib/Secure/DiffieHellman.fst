module DiffieHellman where

import SecureUtils
import Random

type DHProtocol = !Integer ; ?Integer

--8192-bit MODP group 18
_dhP : Integer
_dhP = 68171758476213495590643433084986531271759695309573263235881319185384385557674102439283279615552301110607010260567277060576543672042167353921249641611589827099759815373182646127543631281741314565457020738998902204967231262491310725795783783049784656429244984173561484961967249196407582242419973594946800739429994964183747405442971310357276197966718707884764158104700573267312586099453009222736430034928817707948384625935945930820319750986019930643497543625725884857580157971216801032457458333593944673574522525767607563684739648600967529279953296804207522649084724787612195175422263607098738741914645097619238328447106496924704452040775305936491843260905103268987718680085388156790453979273532133189443896052343062485984002920853239202462209596271775929553414982455918395215636680261863909033790451686705760043324045915933869183540411008141310762080019823231026185722122135090386984943357470309444794098585129592582456002575080219759641815274328607981268105257466267717528269137758126557117498820994251686491762873082385488730053187415605901056747044556560150308610986856182325459772201715941636488490479320970659359714988717520108307866816821009130332898895914296591024879475191128227138086669293956659118949975532739032108101571041195513818810483465657497025265512391425864443585891353148751079869810957758427910917581708563586301897105038951021059341956636980402390581605400836264440381028184599630585971267814830779433087194626769096715786560129644339884489089868936000805734334699917401287732627181269460305815405985087770871167883752365501932268283954605283352502039852443798406398221404956404606149293305776309154934233362524236421338611655298136881804242486186977076164290033373913707654134680188215768243140771030452255415899755865868664300363323597447629772697152280904844241955882490102366731357635413114450115342754879407377583554363024903414099182575081761602430505168713042908502824540598074881897103746444487643789756656866563996478864339776660187994830128180901836802609305337393169233940810850334954844734351233176485825993422195110091742991582981694723362766532450396825990637199710300836720425733904633221862633140406646325438770987356673794087934079714925391623657263106674731411202754711280639483814428913435548956637991855491756776477498248950567351547380031249267224462049204226698902680800602929639266448277227648036766258697622677257592622880796582843040065889927455946187061208465381880645326934704804407788209945307399546272072143428648959i

_dhG : Integer
_dhG = 2i

-- Unsigend DH versions
dhA : forall a . DHProtocol ; a -> (a, Key)
dhA c =
    let (aSecret, rng) = nextN64Bits 4 (newRNGState ()) in
    let aShared = modExp _dhG aSecret _dhP in
    let c = send aShared c in
    let (bShared, c) = receive c in
    (c, (SessionKey $ hash256 $ modExp bShared aSecret _dhP))

dhB : forall a . dualof DHProtocol ; a -> (a, Key)
dhB c =
    let (bSecret, rng) = nextN64Bits 4 (newRNGState ()) in
    let (aShared, c) = receive c in
    let bShared = (modExp _dhG bSecret _dhP) in
    let c = send bShared c in
    (c, (SessionKey $ hash256 $ modExp aShared bSecret _dhP))

-- Sigend DH versions
_appendSignature : Integer -> Signature -> Integer
_appendSignature value (Signature signature) = lorI (shiftLI value 3072) signature

_separateSignature : Integer -> (Integer, Signature)
_separateSignature value = (shiftRI value 3072, (Signature (modI value (2i ^i 3072i))))

signedDHA : forall a . Key -> Key -> DHProtocol ; a -> (a, Key)
signedDHA piKey puKey c =
    --Clacualte a and A
    let (aSecret, rng) = nextN64Bits 4 (newRNGState ()) in
    let aShared = modExp _dhG aSecret _dhP in
    --Send A along its signature
    let aSignature = sign aShared piKey in
    let aSharedSigned = _appendSignature aShared aSignature in
    let c = send aSharedSigned c in
    --Get B and its signature
    let (bSharedSigned, c) = receive c in
    let (bShared, bSignature) = _separateSignature bSharedSigned in
    --CheckSignature
    if checkSignature bSignature bShared puKey then
        (c, (SessionKey $ hash256 $ modExp bShared aSecret _dhP))
    else
        error @() "Invalid shared value signature.";
        (c, (SessionKey -1i))

signedDHB : forall a . Key -> Key -> dualof DHProtocol ; a -> (a, Key)
signedDHB piKey puKey c =
    --Clacualte b and B
    let (bSecret, rng) = nextN64Bits 4 (newRNGState ()) in
    let bShared = modExp _dhG bSecret _dhP in
    --Get A and its signature
    let (aSharedSigned, c) = receive c in
    let (aShared, aSignature) = _separateSignature aSharedSigned in
    --Send B along its signature
    let bSignature = sign bShared piKey in
    let bSharedSigned = _appendSignature bShared bSignature in
    let c = send bSharedSigned c in
    --CheckSignature
    if checkSignature aSignature aShared puKey then
        (c, (SessionKey $ hash256 $ modExp aShared bSecret _dhP))
    else
        error @() "Invalid shared value signature.";
        (c, (SessionKey -1i))
