(Review1, Review3) Concrete comparison with related algorithms

The practical algorithm in the literature that is closer to our proposal is that by Henry and SÃ©nizergues [10] that decides the equivalence of deterministic pushdown automata (DPDAs) by checking language equality. The experiments section of [10] show that, for several examples, the algorithm takes more than one hour to decide the equivalence of two DPDAs. Considering the need to incorporate this functionality in a compiler, one hour is not a feasible runtime. Furthermore, the equivalence problem we are dealing with does not coincide with the equivalence of DPDAs: deciding the equality of the languages of two DPDAs is not the same problem as deciding the bisimilarity of two DPDAs. For this, consider the DPDA D1 with a single state q and a single loop labeled a to itself, q -a-> q, and the DPDA D2 with a single state p and a single loop labeled b to itself, p -b-> p. The languages generated by both DPDAs are empty, whence L(D1) = L(D2), but they are not bisimilar because D1 has a transition by a and D2 does not. We will clarify these points in a final version of the paper.
The remaining existing implementations do not cover the whole generality of BPAs or simple grammars that we need in order to handle context-free session types.

(Review2) On page 6, definition of word, item 4:  should * on the right hand side be there?

The *l notation is meant to denote a label obtained by concatenating + or & to the label itself. It is important to distinguish +l from &l labels. We will make this clear in the camera-ready.

(Review2) The goal of the simplification rules BPA1 and BPA2 is not clear

(AM)

(Review3) The definition of bisimilarity is not given

Please see bottom of page 4.

(Review3) Kripke structures

Kripke structures have (one or more) labels associated with states and then have (non-labelled) transitions between states. Labelled transition systems have one label associated with each transition between states (i.e., types or words in a grammar, in our case). In this sense, the notions of bisimilarity for the two cases have some similarities but do not coincide.

(Review3) Bisimulation and the description of protocols in concurrent programs

Session types are used to describe protocols in concurrent programs. When incorporated in programming languages, the notion of type equivalence becomes of paramount importance. Due to the characteristics of session types (choice, recursion), bisimulation is a widely used tool to define type equivalence.
