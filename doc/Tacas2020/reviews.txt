----------------------- REVIEW 1 ---------------------
SUBMISSION: 98
TITLE: Deciding the bisimilarity of context-free session types
AUTHORS: Bernardo Almeida, Andreia Mordido and Vasco T. Vasconcelos

----------- Overall evaluation -----------
SCORE: 1 (weak accept)
----- TEXT:
The authors present a novel practical algorithm that can decide whether two context-free session types, used for communication, are equivalent. This is important in compilers to perform type checking.

I appreciate that the authors have implemented this as part of an available tool. I think the contributions fit the venue.

What I miss is a concrete comparison to those related work algorithms mentioned in the paper that are too slow to be useful. So how slow is too slow?

Why are the benchmarks generated by QuickCheck representative?


----------------------- REVIEW 2 ---------------------
SUBMISSION: 98
TITLE: Deciding the bisimilarity of context-free session types
AUTHORS: Bernardo Almeida, Andreia Mordido and Vasco T. Vasconcelos

----------- Overall evaluation -----------
SCORE: 2 (accept)
----- TEXT:
The goal of this paper is to develop an algorithm for checking equivalence of context-free session types. Context-free session types are more expressive than the traditional regular session types, and allow to describe richer structured communication on typed channels.

It has been shown before that the equivalence of context-free session types can be reduced to the verification of bisimulation for basic process algebra (BPA). The latter problem has shown to be decidable but no algorithm has been suggested.

The paper presents an algorithm with high complexity, but their experimental results on deciding bisimulation (and thus checking equivalence) are promising. They claim that their algorithm is practical enough to be included in any compiler.

Comments:
On page 6, definition of word, item 4:  should * on the right hand side be there?
The goal of the simplification rules BPA1 and BPA2 is not clear.
The concept of full abstraction should be defined.
The claim that their algorithm can be incorporated in a compiler has not been demonstrated in this paper (but in another paper [2]).


----------------------- REVIEW 3 ---------------------
SUBMISSION: 98
TITLE: Deciding the bisimilarity of context-free session types
AUTHORS: Bernardo Almeida, Andreia Mordido and Vasco T. Vasconcelos

----------- Overall evaluation -----------
SCORE: 0 (borderline paper)
----- TEXT:
The paper describes an algorithm and an implementation in Haskell for deciding bisimilarity of context-free session types. One immediate problem is that the definition of bisimilarity is actually not given anywhere in the paper - I guessed it from the algorithm. The algorithm is exactly the same as the bisimilation algorithm for, say, Kripke structures, as it consists of checking the local labelling and recursively invoking itself for all successors of the current state. In context-free grammars, there is an additional complication of being stuck in an infinite path on the expansion tree, but the paper avoids it by performing BFS.

The authors motivate this research by the need to describe protocols in concurrent programs. I am not entirely sure why bisimilation would help here - perhaps the authors can explain. 

Putting the motivation aside, the paper introduces an algorithm (albeit fairly simple), proves that it terminates (a small subtlety here due to a potentially infinite path), and describes an implementation. The performance is not compared with any other tool, perhaps because none exist?


------------------------------------------------------
