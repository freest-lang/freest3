def client c: TermChannel;?int =
  c select Add.
  c select Const. c!5
  c select Mult.
  c select Const. c!7
  c select Const. c!9
  c?n. printInteger!n

def receiveEval (c: forall alpha.dualof TermChannel;alpha, r:!int) =
  case c of
    Const ->
      c?n.r!n
    Add ->
      new r1 s1:!int receiveEval!(c,r1).s1?n1.
      new r2 s2:!int receiveEval!(c,r2).s2?n2.
      r!(n1+n2)
    Mult ->
      -- as above
    r!(n1*n2)

def computeService c: dualof TermChannel;!int =
  new rs: !int
  receiveEval!(c,r). s?n.c!n

-- main
new cs:TermChannel;?int
client!c |
computeService!s
